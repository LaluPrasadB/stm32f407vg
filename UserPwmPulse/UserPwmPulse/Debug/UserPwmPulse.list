
UserPwmPulse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016cc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001854  08001854  00011854  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001864  08001864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800186c  0800186c  0001186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001870  08001870  00011870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_info   000081f9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000014db  00000000  00000000  0002822d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000de0  00000000  00000000  00029708  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000340  00000000  00000000  0002a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000430  00000000  00000000  0002a828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00001f0c  00000000  00000000  0002ac58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000189e  00000000  00000000  0002cb64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0002e402  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000858  00000000  00000000  0002e480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800183c 	.word	0x0800183c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800183c 	.word	0x0800183c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295
 80009b0:	f000 b97a 	b.w	8000ca8 <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	468c      	mov	ip, r1
 80009d2:	460d      	mov	r5, r1
 80009d4:	4604      	mov	r4, r0
 80009d6:	9e08      	ldr	r6, [sp, #32]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d151      	bne.n	8000a80 <__udivmoddi4+0xb4>
 80009dc:	428a      	cmp	r2, r1
 80009de:	4617      	mov	r7, r2
 80009e0:	d96d      	bls.n	8000abe <__udivmoddi4+0xf2>
 80009e2:	fab2 fe82 	clz	lr, r2
 80009e6:	f1be 0f00 	cmp.w	lr, #0
 80009ea:	d00b      	beq.n	8000a04 <__udivmoddi4+0x38>
 80009ec:	f1ce 0c20 	rsb	ip, lr, #32
 80009f0:	fa01 f50e 	lsl.w	r5, r1, lr
 80009f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009f8:	fa02 f70e 	lsl.w	r7, r2, lr
 80009fc:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a00:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a04:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a08:	0c25      	lsrs	r5, r4, #16
 8000a0a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a0e:	fa1f f987 	uxth.w	r9, r7
 8000a12:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a16:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a1a:	fb08 f309 	mul.w	r3, r8, r9
 8000a1e:	42ab      	cmp	r3, r5
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x6c>
 8000a22:	19ed      	adds	r5, r5, r7
 8000a24:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a28:	f080 8123 	bcs.w	8000c72 <__udivmoddi4+0x2a6>
 8000a2c:	42ab      	cmp	r3, r5
 8000a2e:	f240 8120 	bls.w	8000c72 <__udivmoddi4+0x2a6>
 8000a32:	f1a8 0802 	sub.w	r8, r8, #2
 8000a36:	443d      	add	r5, r7
 8000a38:	1aed      	subs	r5, r5, r3
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a40:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a48:	fb00 f909 	mul.w	r9, r0, r9
 8000a4c:	45a1      	cmp	r9, r4
 8000a4e:	d909      	bls.n	8000a64 <__udivmoddi4+0x98>
 8000a50:	19e4      	adds	r4, r4, r7
 8000a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a56:	f080 810a 	bcs.w	8000c6e <__udivmoddi4+0x2a2>
 8000a5a:	45a1      	cmp	r9, r4
 8000a5c:	f240 8107 	bls.w	8000c6e <__udivmoddi4+0x2a2>
 8000a60:	3802      	subs	r0, #2
 8000a62:	443c      	add	r4, r7
 8000a64:	eba4 0409 	sub.w	r4, r4, r9
 8000a68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d061      	beq.n	8000b36 <__udivmoddi4+0x16a>
 8000a72:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a76:	2300      	movs	r3, #0
 8000a78:	6034      	str	r4, [r6, #0]
 8000a7a:	6073      	str	r3, [r6, #4]
 8000a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a80:	428b      	cmp	r3, r1
 8000a82:	d907      	bls.n	8000a94 <__udivmoddi4+0xc8>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d054      	beq.n	8000b32 <__udivmoddi4+0x166>
 8000a88:	2100      	movs	r1, #0
 8000a8a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000a8e:	4608      	mov	r0, r1
 8000a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a94:	fab3 f183 	clz	r1, r3
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	f040 808e 	bne.w	8000bba <__udivmoddi4+0x1ee>
 8000a9e:	42ab      	cmp	r3, r5
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xdc>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80fa 	bhi.w	8000c9c <__udivmoddi4+0x2d0>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb65 0503 	sbc.w	r5, r5, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	46ac      	mov	ip, r5
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d03f      	beq.n	8000b36 <__udivmoddi4+0x16a>
 8000ab6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	b912      	cbnz	r2, 8000ac6 <__udivmoddi4+0xfa>
 8000ac0:	2701      	movs	r7, #1
 8000ac2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ac6:	fab7 fe87 	clz	lr, r7
 8000aca:	f1be 0f00 	cmp.w	lr, #0
 8000ace:	d134      	bne.n	8000b3a <__udivmoddi4+0x16e>
 8000ad0:	1beb      	subs	r3, r5, r7
 8000ad2:	0c3a      	lsrs	r2, r7, #16
 8000ad4:	fa1f fc87 	uxth.w	ip, r7
 8000ad8:	2101      	movs	r1, #1
 8000ada:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ade:	0c25      	lsrs	r5, r4, #16
 8000ae0:	fb02 3318 	mls	r3, r2, r8, r3
 8000ae4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ae8:	fb0c f308 	mul.w	r3, ip, r8
 8000aec:	42ab      	cmp	r3, r5
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0x134>
 8000af0:	19ed      	adds	r5, r5, r7
 8000af2:	f108 30ff 	add.w	r0, r8, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x132>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	f200 80d1 	bhi.w	8000ca0 <__udivmoddi4+0x2d4>
 8000afe:	4680      	mov	r8, r0
 8000b00:	1aed      	subs	r5, r5, r3
 8000b02:	b2a3      	uxth	r3, r4
 8000b04:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b08:	fb02 5510 	mls	r5, r2, r0, r5
 8000b0c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b10:	fb0c fc00 	mul.w	ip, ip, r0
 8000b14:	45a4      	cmp	ip, r4
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x15c>
 8000b18:	19e4      	adds	r4, r4, r7
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x15a>
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	f200 80b8 	bhi.w	8000c96 <__udivmoddi4+0x2ca>
 8000b26:	4618      	mov	r0, r3
 8000b28:	eba4 040c 	sub.w	r4, r4, ip
 8000b2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b30:	e79d      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000b32:	4631      	mov	r1, r6
 8000b34:	4630      	mov	r0, r6
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	f1ce 0420 	rsb	r4, lr, #32
 8000b3e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b42:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b46:	fa20 f804 	lsr.w	r8, r0, r4
 8000b4a:	0c3a      	lsrs	r2, r7, #16
 8000b4c:	fa25 f404 	lsr.w	r4, r5, r4
 8000b50:	ea48 0803 	orr.w	r8, r8, r3
 8000b54:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b58:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b5c:	fb02 4411 	mls	r4, r2, r1, r4
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b68:	fb01 f30c 	mul.w	r3, r1, ip
 8000b6c:	42ab      	cmp	r3, r5
 8000b6e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x1bc>
 8000b74:	19ed      	adds	r5, r5, r7
 8000b76:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b7a:	f080 808a 	bcs.w	8000c92 <__udivmoddi4+0x2c6>
 8000b7e:	42ab      	cmp	r3, r5
 8000b80:	f240 8087 	bls.w	8000c92 <__udivmoddi4+0x2c6>
 8000b84:	3902      	subs	r1, #2
 8000b86:	443d      	add	r5, r7
 8000b88:	1aeb      	subs	r3, r5, r3
 8000b8a:	fa1f f588 	uxth.w	r5, r8
 8000b8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000b92:	fb02 3310 	mls	r3, r2, r0, r3
 8000b96:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b9a:	fb00 f30c 	mul.w	r3, r0, ip
 8000b9e:	42ab      	cmp	r3, r5
 8000ba0:	d907      	bls.n	8000bb2 <__udivmoddi4+0x1e6>
 8000ba2:	19ed      	adds	r5, r5, r7
 8000ba4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ba8:	d26f      	bcs.n	8000c8a <__udivmoddi4+0x2be>
 8000baa:	42ab      	cmp	r3, r5
 8000bac:	d96d      	bls.n	8000c8a <__udivmoddi4+0x2be>
 8000bae:	3802      	subs	r0, #2
 8000bb0:	443d      	add	r5, r7
 8000bb2:	1aeb      	subs	r3, r5, r3
 8000bb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb8:	e78f      	b.n	8000ada <__udivmoddi4+0x10e>
 8000bba:	f1c1 0720 	rsb	r7, r1, #32
 8000bbe:	fa22 f807 	lsr.w	r8, r2, r7
 8000bc2:	408b      	lsls	r3, r1
 8000bc4:	fa05 f401 	lsl.w	r4, r5, r1
 8000bc8:	ea48 0303 	orr.w	r3, r8, r3
 8000bcc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000bd0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000bda:	fbb5 f9fc 	udiv	r9, r5, ip
 8000bde:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000be2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000be6:	fa1f f883 	uxth.w	r8, r3
 8000bea:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000bee:	fb09 f408 	mul.w	r4, r9, r8
 8000bf2:	42ac      	cmp	r4, r5
 8000bf4:	fa02 f201 	lsl.w	r2, r2, r1
 8000bf8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x244>
 8000bfe:	18ed      	adds	r5, r5, r3
 8000c00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c04:	d243      	bcs.n	8000c8e <__udivmoddi4+0x2c2>
 8000c06:	42ac      	cmp	r4, r5
 8000c08:	d941      	bls.n	8000c8e <__udivmoddi4+0x2c2>
 8000c0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0e:	441d      	add	r5, r3
 8000c10:	1b2d      	subs	r5, r5, r4
 8000c12:	fa1f fe8e 	uxth.w	lr, lr
 8000c16:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c1a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c1e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c22:	fb00 f808 	mul.w	r8, r0, r8
 8000c26:	45a0      	cmp	r8, r4
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x26e>
 8000c2a:	18e4      	adds	r4, r4, r3
 8000c2c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c30:	d229      	bcs.n	8000c86 <__udivmoddi4+0x2ba>
 8000c32:	45a0      	cmp	r8, r4
 8000c34:	d927      	bls.n	8000c86 <__udivmoddi4+0x2ba>
 8000c36:	3802      	subs	r0, #2
 8000c38:	441c      	add	r4, r3
 8000c3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3e:	eba4 0408 	sub.w	r4, r4, r8
 8000c42:	fba0 8902 	umull	r8, r9, r0, r2
 8000c46:	454c      	cmp	r4, r9
 8000c48:	46c6      	mov	lr, r8
 8000c4a:	464d      	mov	r5, r9
 8000c4c:	d315      	bcc.n	8000c7a <__udivmoddi4+0x2ae>
 8000c4e:	d012      	beq.n	8000c76 <__udivmoddi4+0x2aa>
 8000c50:	b156      	cbz	r6, 8000c68 <__udivmoddi4+0x29c>
 8000c52:	ebba 030e 	subs.w	r3, sl, lr
 8000c56:	eb64 0405 	sbc.w	r4, r4, r5
 8000c5a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c5e:	40cb      	lsrs	r3, r1
 8000c60:	431f      	orrs	r7, r3
 8000c62:	40cc      	lsrs	r4, r1
 8000c64:	6037      	str	r7, [r6, #0]
 8000c66:	6074      	str	r4, [r6, #4]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	e6f8      	b.n	8000a64 <__udivmoddi4+0x98>
 8000c72:	4690      	mov	r8, r2
 8000c74:	e6e0      	b.n	8000a38 <__udivmoddi4+0x6c>
 8000c76:	45c2      	cmp	sl, r8
 8000c78:	d2ea      	bcs.n	8000c50 <__udivmoddi4+0x284>
 8000c7a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7e:	eb69 0503 	sbc.w	r5, r9, r3
 8000c82:	3801      	subs	r0, #1
 8000c84:	e7e4      	b.n	8000c50 <__udivmoddi4+0x284>
 8000c86:	4628      	mov	r0, r5
 8000c88:	e7d7      	b.n	8000c3a <__udivmoddi4+0x26e>
 8000c8a:	4640      	mov	r0, r8
 8000c8c:	e791      	b.n	8000bb2 <__udivmoddi4+0x1e6>
 8000c8e:	4681      	mov	r9, r0
 8000c90:	e7be      	b.n	8000c10 <__udivmoddi4+0x244>
 8000c92:	4601      	mov	r1, r0
 8000c94:	e778      	b.n	8000b88 <__udivmoddi4+0x1bc>
 8000c96:	3802      	subs	r0, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	e745      	b.n	8000b28 <__udivmoddi4+0x15c>
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e708      	b.n	8000ab2 <__udivmoddi4+0xe6>
 8000ca0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca4:	443d      	add	r5, r7
 8000ca6:	e72b      	b.n	8000b00 <__udivmoddi4+0x134>

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_InitTick+0x24>)
{
 8000cb0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cbc:	f000 f878 	bl	8000db0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4621      	mov	r1, r4
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 f83e 	bl	8000d48 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000ccc:	2000      	movs	r0, #0
 8000cce:	bd10      	pop	{r4, pc}
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <HAL_Init>:
{
 8000cd4:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x30>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cde:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ce6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cee:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f817 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ffd8 	bl	8000cac <HAL_InitTick>
  HAL_MspInit();
 8000cfc:	f000 fcea 	bl	80016d4 <HAL_MspInit>
}
 8000d00:	2000      	movs	r0, #0
 8000d02:	bd08      	pop	{r3, pc}
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d08:	4a02      	ldr	r2, [pc, #8]	; (8000d14 <HAL_IncTick+0xc>)
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000024 	.word	0x20000024

08000d18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d18:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <HAL_GetTick+0x8>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000024 	.word	0x20000024

08000d24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d26:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d2c:	041b      	lsls	r3, r3, #16
 8000d2e:	0c1b      	lsrs	r3, r3, #16
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d34:	0200      	lsls	r0, r0, #8
 8000d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000d3e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d40:	60d3      	str	r3, [r2, #12]
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4a:	b530      	push	{r4, r5, lr}
 8000d4c:	68dc      	ldr	r4, [r3, #12]
 8000d4e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d52:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	bf28      	it	cs
 8000d5c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 0501 	mov.w	r5, #1
 8000d64:	fa05 f303 	lsl.w	r3, r5, r3
 8000d68:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6c:	bf8c      	ite	hi
 8000d6e:	3c03      	subhi	r4, #3
 8000d70:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d72:	4019      	ands	r1, r3
 8000d74:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d76:	fa05 f404 	lsl.w	r4, r5, r4
 8000d7a:	3c01      	subs	r4, #1
 8000d7c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000d7e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	ea42 0201 	orr.w	r2, r2, r1
 8000d84:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	bfaf      	iteee	ge
 8000d8a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	f000 000f 	andlt.w	r0, r0, #15
 8000d92:	4b06      	ldrlt	r3, [pc, #24]	; (8000dac <HAL_NVIC_SetPriority+0x64>)
 8000d94:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	bfa5      	ittet	ge
 8000d98:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000d9c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000da4:	bd30      	pop	{r4, r5, pc}
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00
 8000dac:	e000ed14 	.word	0xe000ed14

08000db0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	3801      	subs	r0, #1
 8000db2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000db6:	d20a      	bcs.n	8000dce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	21f0      	movs	r1, #240	; 0xf0
 8000dc0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dde:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000de0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000de2:	bf0c      	ite	eq
 8000de4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000de8:	f022 0204 	bicne.w	r2, r2, #4
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	4770      	bx	lr
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000df4:	4770      	bx	lr

08000df6 <HAL_SYSTICK_IRQHandler>:
{
 8000df6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000df8:	f7ff fffc 	bl	8000df4 <HAL_SYSTICK_Callback>
 8000dfc:	bd08      	pop	{r3, pc}
	...

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e04:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e08:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000fb8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e0c:	4a68      	ldr	r2, [pc, #416]	; (8000fb0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e0e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000fbc <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e14:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e16:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000e1c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e20:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e24:	45b6      	cmp	lr, r6
 8000e26:	f040 80ae 	bne.w	8000f86 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2a:	684c      	ldr	r4, [r1, #4]
 8000e2c:	f024 0710 	bic.w	r7, r4, #16
 8000e30:	2f02      	cmp	r7, #2
 8000e32:	d116      	bne.n	8000e62 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000e34:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000e38:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e40:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e44:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e48:	f04f 0c0f 	mov.w	ip, #15
 8000e4c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000e50:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e54:	690d      	ldr	r5, [r1, #16]
 8000e56:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e5a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e5e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000e62:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e66:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e68:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e70:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e72:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e76:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e7e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e80:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e84:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000e86:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8a:	d811      	bhi.n	8000eb0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000e8c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e8e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e92:	68cf      	ldr	r7, [r1, #12]
 8000e94:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000e98:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000e9c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e9e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ea4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000ea8:	409f      	lsls	r7, r3
 8000eaa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000eae:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000eb0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb4:	688f      	ldr	r7, [r1, #8]
 8000eb6:	fa07 f70a 	lsl.w	r7, r7, sl
 8000eba:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ebc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ebe:	00e5      	lsls	r5, r4, #3
 8000ec0:	d561      	bpl.n	8000f86 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	f04f 0b00 	mov.w	fp, #0
 8000ec6:	f8cd b00c 	str.w	fp, [sp, #12]
 8000eca:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ece:	4d39      	ldr	r5, [pc, #228]	; (8000fb4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ed4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ed8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000edc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000ee0:	9703      	str	r7, [sp, #12]
 8000ee2:	9f03      	ldr	r7, [sp, #12]
 8000ee4:	f023 0703 	bic.w	r7, r3, #3
 8000ee8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000eec:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000efc:	f04f 0e0f 	mov.w	lr, #15
 8000f00:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f04:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f06:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0a:	d043      	beq.n	8000f94 <HAL_GPIO_Init+0x194>
 8000f0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f10:	42a8      	cmp	r0, r5
 8000f12:	d041      	beq.n	8000f98 <HAL_GPIO_Init+0x198>
 8000f14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f18:	42a8      	cmp	r0, r5
 8000f1a:	d03f      	beq.n	8000f9c <HAL_GPIO_Init+0x19c>
 8000f1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f20:	42a8      	cmp	r0, r5
 8000f22:	d03d      	beq.n	8000fa0 <HAL_GPIO_Init+0x1a0>
 8000f24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f28:	42a8      	cmp	r0, r5
 8000f2a:	d03b      	beq.n	8000fa4 <HAL_GPIO_Init+0x1a4>
 8000f2c:	4548      	cmp	r0, r9
 8000f2e:	d03b      	beq.n	8000fa8 <HAL_GPIO_Init+0x1a8>
 8000f30:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f34:	42a8      	cmp	r0, r5
 8000f36:	d039      	beq.n	8000fac <HAL_GPIO_Init+0x1ac>
 8000f38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f3c:	42a8      	cmp	r0, r5
 8000f3e:	bf14      	ite	ne
 8000f40:	2508      	movne	r5, #8
 8000f42:	2507      	moveq	r5, #7
 8000f44:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f48:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f4c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000f4e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f52:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f56:	bf0c      	ite	eq
 8000f58:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f5a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000f5c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000f5e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f60:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f64:	bf0c      	ite	eq
 8000f66:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f68:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000f6a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f72:	bf0c      	ite	eq
 8000f74:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f76:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f78:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f7a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f7c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	bf54      	ite	pl
 8000f80:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000f82:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000f84:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f86:	3301      	adds	r3, #1
 8000f88:	2b10      	cmp	r3, #16
 8000f8a:	f47f af44 	bne.w	8000e16 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000f8e:	b005      	add	sp, #20
 8000f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f94:	465d      	mov	r5, fp
 8000f96:	e7d5      	b.n	8000f44 <HAL_GPIO_Init+0x144>
 8000f98:	2501      	movs	r5, #1
 8000f9a:	e7d3      	b.n	8000f44 <HAL_GPIO_Init+0x144>
 8000f9c:	2502      	movs	r5, #2
 8000f9e:	e7d1      	b.n	8000f44 <HAL_GPIO_Init+0x144>
 8000fa0:	2503      	movs	r5, #3
 8000fa2:	e7cf      	b.n	8000f44 <HAL_GPIO_Init+0x144>
 8000fa4:	2504      	movs	r5, #4
 8000fa6:	e7cd      	b.n	8000f44 <HAL_GPIO_Init+0x144>
 8000fa8:	2505      	movs	r5, #5
 8000faa:	e7cb      	b.n	8000f44 <HAL_GPIO_Init+0x144>
 8000fac:	2506      	movs	r5, #6
 8000fae:	e7c9      	b.n	8000f44 <HAL_GPIO_Init+0x144>
 8000fb0:	40013c00 	.word	0x40013c00
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40021400 	.word	0x40021400

08000fc0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fc0:	6903      	ldr	r3, [r0, #16]
 8000fc2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000fc4:	bf14      	ite	ne
 8000fc6:	2001      	movne	r0, #1
 8000fc8:	2000      	moveq	r0, #0
 8000fca:	4770      	bx	lr

08000fcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fcc:	b10a      	cbz	r2, 8000fd2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fce:	6181      	str	r1, [r0, #24]
 8000fd0:	4770      	bx	lr
 8000fd2:	0409      	lsls	r1, r1, #16
 8000fd4:	e7fb      	b.n	8000fce <HAL_GPIO_WritePin+0x2>
	...

08000fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fda:	4604      	mov	r4, r0
 8000fdc:	b910      	cbnz	r0, 8000fe4 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8000fde:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000fe0:	b003      	add	sp, #12
 8000fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fe4:	6803      	ldr	r3, [r0, #0]
 8000fe6:	07d8      	lsls	r0, r3, #31
 8000fe8:	d43b      	bmi.n	8001062 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	0799      	lsls	r1, r3, #30
 8000fee:	f100 8084 	bmi.w	80010fa <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	071e      	lsls	r6, r3, #28
 8000ff6:	f100 80c6 	bmi.w	8001186 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	075d      	lsls	r5, r3, #29
 8000ffe:	d52a      	bpl.n	8001056 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	4baa      	ldr	r3, [pc, #680]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 8001006:	4dab      	ldr	r5, [pc, #684]	; (80012b4 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800101a:	682b      	ldr	r3, [r5, #0]
 800101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001020:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001022:	f7ff fe79 	bl	8000d18 <HAL_GetTick>
 8001026:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	05da      	lsls	r2, r3, #23
 800102c:	f140 80cd 	bpl.w	80011ca <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001030:	68a3      	ldr	r3, [r4, #8]
 8001032:	4d9f      	ldr	r5, [pc, #636]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 8001034:	2b01      	cmp	r3, #1
 8001036:	f040 80cf 	bne.w	80011d8 <HAL_RCC_OscConfig+0x200>
 800103a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001042:	f7ff fe69 	bl	8000d18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001046:	4d9a      	ldr	r5, [pc, #616]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001048:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001050:	079b      	lsls	r3, r3, #30
 8001052:	f140 80e2 	bpl.w	800121a <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001056:	69a2      	ldr	r2, [r4, #24]
 8001058:	2a00      	cmp	r2, #0
 800105a:	f040 80e5 	bne.w	8001228 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 800105e:	2000      	movs	r0, #0
 8001060:	e7be      	b.n	8000fe0 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001062:	4b93      	ldr	r3, [pc, #588]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	f002 020c 	and.w	r2, r2, #12
 800106a:	2a04      	cmp	r2, #4
 800106c:	d007      	beq.n	800107e <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001074:	2a08      	cmp	r2, #8
 8001076:	d10a      	bne.n	800108e <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	025a      	lsls	r2, r3, #9
 800107c:	d507      	bpl.n	800108e <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107e:	4b8c      	ldr	r3, [pc, #560]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	039b      	lsls	r3, r3, #14
 8001084:	d5b1      	bpl.n	8000fea <HAL_RCC_OscConfig+0x12>
 8001086:	6863      	ldr	r3, [r4, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ae      	bne.n	8000fea <HAL_RCC_OscConfig+0x12>
 800108c:	e7a7      	b.n	8000fde <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108e:	6863      	ldr	r3, [r4, #4]
 8001090:	4d87      	ldr	r5, [pc, #540]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 8001092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001096:	d111      	bne.n	80010bc <HAL_RCC_OscConfig+0xe4>
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010a0:	f7ff fe3a 	bl	8000d18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a4:	4d82      	ldr	r5, [pc, #520]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80010a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	039f      	lsls	r7, r3, #14
 80010ac:	d49d      	bmi.n	8000fea <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ae:	f7ff fe33 	bl	8000d18 <HAL_GetTick>
 80010b2:	1b80      	subs	r0, r0, r6
 80010b4:	2864      	cmp	r0, #100	; 0x64
 80010b6:	d9f7      	bls.n	80010a8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80010b8:	2003      	movs	r0, #3
 80010ba:	e791      	b.n	8000fe0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c0:	d104      	bne.n	80010cc <HAL_RCC_OscConfig+0xf4>
 80010c2:	682b      	ldr	r3, [r5, #0]
 80010c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c8:	602b      	str	r3, [r5, #0]
 80010ca:	e7e5      	b.n	8001098 <HAL_RCC_OscConfig+0xc0>
 80010cc:	682a      	ldr	r2, [r5, #0]
 80010ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010d2:	602a      	str	r2, [r5, #0]
 80010d4:	682a      	ldr	r2, [r5, #0]
 80010d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010da:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1df      	bne.n	80010a0 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80010e0:	f7ff fe1a 	bl	8000d18 <HAL_GetTick>
 80010e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	682b      	ldr	r3, [r5, #0]
 80010e8:	0398      	lsls	r0, r3, #14
 80010ea:	f57f af7e 	bpl.w	8000fea <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ee:	f7ff fe13 	bl	8000d18 <HAL_GetTick>
 80010f2:	1b80      	subs	r0, r0, r6
 80010f4:	2864      	cmp	r0, #100	; 0x64
 80010f6:	d9f6      	bls.n	80010e6 <HAL_RCC_OscConfig+0x10e>
 80010f8:	e7de      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010fa:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	f012 0f0c 	tst.w	r2, #12
 8001102:	d007      	beq.n	8001114 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800110a:	2a08      	cmp	r2, #8
 800110c:	d112      	bne.n	8001134 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	0259      	lsls	r1, r3, #9
 8001112:	d40f      	bmi.n	8001134 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001114:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	0792      	lsls	r2, r2, #30
 800111a:	d503      	bpl.n	8001124 <HAL_RCC_OscConfig+0x14c>
 800111c:	68e2      	ldr	r2, [r4, #12]
 800111e:	2a01      	cmp	r2, #1
 8001120:	f47f af5d 	bne.w	8000fde <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	6921      	ldr	r1, [r4, #16]
 8001128:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800112c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001130:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	e75e      	b.n	8000ff2 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001134:	68e2      	ldr	r2, [r4, #12]
 8001136:	4b60      	ldr	r3, [pc, #384]	; (80012b8 <HAL_RCC_OscConfig+0x2e0>)
 8001138:	b1b2      	cbz	r2, 8001168 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800113e:	f7ff fdeb 	bl	8000d18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001142:	4d5b      	ldr	r5, [pc, #364]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001144:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001146:	682b      	ldr	r3, [r5, #0]
 8001148:	079b      	lsls	r3, r3, #30
 800114a:	d507      	bpl.n	800115c <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114c:	682b      	ldr	r3, [r5, #0]
 800114e:	6922      	ldr	r2, [r4, #16]
 8001150:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001154:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001158:	602b      	str	r3, [r5, #0]
 800115a:	e74a      	b.n	8000ff2 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff fddc 	bl	8000d18 <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	2802      	cmp	r0, #2
 8001164:	d9ef      	bls.n	8001146 <HAL_RCC_OscConfig+0x16e>
 8001166:	e7a7      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8001168:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800116a:	f7ff fdd5 	bl	8000d18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116e:	4d50      	ldr	r5, [pc, #320]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001170:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	682b      	ldr	r3, [r5, #0]
 8001174:	079f      	lsls	r7, r3, #30
 8001176:	f57f af3c 	bpl.w	8000ff2 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800117a:	f7ff fdcd 	bl	8000d18 <HAL_GetTick>
 800117e:	1b80      	subs	r0, r0, r6
 8001180:	2802      	cmp	r0, #2
 8001182:	d9f6      	bls.n	8001172 <HAL_RCC_OscConfig+0x19a>
 8001184:	e798      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001186:	6962      	ldr	r2, [r4, #20]
 8001188:	4b4c      	ldr	r3, [pc, #304]	; (80012bc <HAL_RCC_OscConfig+0x2e4>)
 800118a:	b17a      	cbz	r2, 80011ac <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001190:	f7ff fdc2 	bl	8000d18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001194:	4d46      	ldr	r5, [pc, #280]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001196:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001198:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800119a:	0798      	lsls	r0, r3, #30
 800119c:	f53f af2d 	bmi.w	8000ffa <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a0:	f7ff fdba 	bl	8000d18 <HAL_GetTick>
 80011a4:	1b80      	subs	r0, r0, r6
 80011a6:	2802      	cmp	r0, #2
 80011a8:	d9f6      	bls.n	8001198 <HAL_RCC_OscConfig+0x1c0>
 80011aa:	e785      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 80011ac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011ae:	f7ff fdb3 	bl	8000d18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b2:	4d3f      	ldr	r5, [pc, #252]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80011b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011b8:	0799      	lsls	r1, r3, #30
 80011ba:	f57f af1e 	bpl.w	8000ffa <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011be:	f7ff fdab 	bl	8000d18 <HAL_GetTick>
 80011c2:	1b80      	subs	r0, r0, r6
 80011c4:	2802      	cmp	r0, #2
 80011c6:	d9f6      	bls.n	80011b6 <HAL_RCC_OscConfig+0x1de>
 80011c8:	e776      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80011ca:	f7ff fda5 	bl	8000d18 <HAL_GetTick>
 80011ce:	1b80      	subs	r0, r0, r6
 80011d0:	2802      	cmp	r0, #2
 80011d2:	f67f af29 	bls.w	8001028 <HAL_RCC_OscConfig+0x50>
 80011d6:	e76f      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d104      	bne.n	80011e6 <HAL_RCC_OscConfig+0x20e>
 80011dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	672b      	str	r3, [r5, #112]	; 0x70
 80011e4:	e729      	b.n	800103a <HAL_RCC_OscConfig+0x62>
 80011e6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	672a      	str	r2, [r5, #112]	; 0x70
 80011ee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011f0:	f022 0204 	bic.w	r2, r2, #4
 80011f4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f47f af23 	bne.w	8001042 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 80011fc:	f7ff fd8c 	bl	8000d18 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001200:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001204:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001206:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001208:	0798      	lsls	r0, r3, #30
 800120a:	f57f af24 	bpl.w	8001056 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff fd83 	bl	8000d18 <HAL_GetTick>
 8001212:	1b80      	subs	r0, r0, r6
 8001214:	42b8      	cmp	r0, r7
 8001216:	d9f6      	bls.n	8001206 <HAL_RCC_OscConfig+0x22e>
 8001218:	e74e      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121a:	f7ff fd7d 	bl	8000d18 <HAL_GetTick>
 800121e:	1b80      	subs	r0, r0, r6
 8001220:	42b8      	cmp	r0, r7
 8001222:	f67f af14 	bls.w	800104e <HAL_RCC_OscConfig+0x76>
 8001226:	e747      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001228:	4d21      	ldr	r5, [pc, #132]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
 800122a:	68ab      	ldr	r3, [r5, #8]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b08      	cmp	r3, #8
 8001232:	f43f aed4 	beq.w	8000fde <HAL_RCC_OscConfig+0x6>
 8001236:	4e22      	ldr	r6, [pc, #136]	; (80012c0 <HAL_RCC_OscConfig+0x2e8>)
 8001238:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800123c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123e:	d12a      	bne.n	8001296 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8001240:	f7ff fd6a 	bl	8000d18 <HAL_GetTick>
 8001244:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	0199      	lsls	r1, r3, #6
 800124a:	d41e      	bmi.n	800128a <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800124c:	6a22      	ldr	r2, [r4, #32]
 800124e:	69e3      	ldr	r3, [r4, #28]
 8001250:	4313      	orrs	r3, r2
 8001252:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001254:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001258:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800125a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800125e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001260:	4c13      	ldr	r4, [pc, #76]	; (80012b0 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001262:	0852      	lsrs	r2, r2, #1
 8001264:	3a01      	subs	r2, #1
 8001266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800126a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800126c:	2301      	movs	r3, #1
 800126e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001270:	f7ff fd52 	bl	8000d18 <HAL_GetTick>
 8001274:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	019a      	lsls	r2, r3, #6
 800127a:	f53f aef0 	bmi.w	800105e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff fd4b 	bl	8000d18 <HAL_GetTick>
 8001282:	1b40      	subs	r0, r0, r5
 8001284:	2802      	cmp	r0, #2
 8001286:	d9f6      	bls.n	8001276 <HAL_RCC_OscConfig+0x29e>
 8001288:	e716      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800128a:	f7ff fd45 	bl	8000d18 <HAL_GetTick>
 800128e:	1bc0      	subs	r0, r0, r7
 8001290:	2802      	cmp	r0, #2
 8001292:	d9d8      	bls.n	8001246 <HAL_RCC_OscConfig+0x26e>
 8001294:	e710      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8001296:	f7ff fd3f 	bl	8000d18 <HAL_GetTick>
 800129a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	019b      	lsls	r3, r3, #6
 80012a0:	f57f aedd 	bpl.w	800105e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fd38 	bl	8000d18 <HAL_GetTick>
 80012a8:	1b00      	subs	r0, r0, r4
 80012aa:	2802      	cmp	r0, #2
 80012ac:	d9f6      	bls.n	800129c <HAL_RCC_OscConfig+0x2c4>
 80012ae:	e703      	b.n	80010b8 <HAL_RCC_OscConfig+0xe0>
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000
 80012b8:	42470000 	.word	0x42470000
 80012bc:	42470e80 	.word	0x42470e80
 80012c0:	42470060 	.word	0x42470060

080012c4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012c4:	4913      	ldr	r1, [pc, #76]	; (8001314 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80012c6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012c8:	688b      	ldr	r3, [r1, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d003      	beq.n	80012da <HAL_RCC_GetSysClockFreq+0x16>
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d003      	beq.n	80012de <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012d6:	4810      	ldr	r0, [pc, #64]	; (8001318 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012d8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80012da:	4810      	ldr	r0, [pc, #64]	; (800131c <HAL_RCC_GetSysClockFreq+0x58>)
 80012dc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012de:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012e0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012e4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e8:	bf14      	ite	ne
 80012ea:	480c      	ldrne	r0, [pc, #48]	; (800131c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ec:	480a      	ldreq	r0, [pc, #40]	; (8001318 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ee:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80012f2:	bf18      	it	ne
 80012f4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012fa:	fba1 0100 	umull	r0, r1, r1, r0
 80012fe:	f7ff fb4d 	bl	800099c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_RCC_GetSysClockFreq+0x50>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800130a:	3301      	adds	r3, #1
 800130c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800130e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001312:	bd08      	pop	{r3, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	00f42400 	.word	0x00f42400
 800131c:	007a1200 	.word	0x007a1200

08001320 <HAL_RCC_ClockConfig>:
{
 8001320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001324:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001326:	4604      	mov	r4, r0
 8001328:	b910      	cbnz	r0, 8001330 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800132a:	2001      	movs	r0, #1
 800132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001330:	4b44      	ldr	r3, [pc, #272]	; (8001444 <HAL_RCC_ClockConfig+0x124>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f002 020f 	and.w	r2, r2, #15
 8001338:	428a      	cmp	r2, r1
 800133a:	d328      	bcc.n	800138e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800133c:	6821      	ldr	r1, [r4, #0]
 800133e:	078f      	lsls	r7, r1, #30
 8001340:	d42d      	bmi.n	800139e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001342:	07c8      	lsls	r0, r1, #31
 8001344:	d440      	bmi.n	80013c8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001346:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <HAL_RCC_ClockConfig+0x124>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	f002 020f 	and.w	r2, r2, #15
 800134e:	4295      	cmp	r5, r2
 8001350:	d366      	bcc.n	8001420 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001352:	6822      	ldr	r2, [r4, #0]
 8001354:	0751      	lsls	r1, r2, #29
 8001356:	d46c      	bmi.n	8001432 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001358:	0713      	lsls	r3, r2, #28
 800135a:	d507      	bpl.n	800136c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800135c:	4a3a      	ldr	r2, [pc, #232]	; (8001448 <HAL_RCC_ClockConfig+0x128>)
 800135e:	6921      	ldr	r1, [r4, #16]
 8001360:	6893      	ldr	r3, [r2, #8]
 8001362:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001366:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800136a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800136c:	f7ff ffaa 	bl	80012c4 <HAL_RCC_GetSysClockFreq>
 8001370:	4b35      	ldr	r3, [pc, #212]	; (8001448 <HAL_RCC_ClockConfig+0x128>)
 8001372:	4a36      	ldr	r2, [pc, #216]	; (800144c <HAL_RCC_ClockConfig+0x12c>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	40d8      	lsrs	r0, r3
 800137e:	4b34      	ldr	r3, [pc, #208]	; (8001450 <HAL_RCC_ClockConfig+0x130>)
 8001380:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff fc92 	bl	8000cac <HAL_InitTick>
  return HAL_OK;
 8001388:	2000      	movs	r0, #0
 800138a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	4299      	cmp	r1, r3
 800139a:	d1c6      	bne.n	800132a <HAL_RCC_ClockConfig+0xa>
 800139c:	e7ce      	b.n	800133c <HAL_RCC_ClockConfig+0x1c>
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013a4:	bf1e      	ittt	ne
 80013a6:	689a      	ldrne	r2, [r3, #8]
 80013a8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80013ac:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ae:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b0:	bf42      	ittt	mi
 80013b2:	689a      	ldrmi	r2, [r3, #8]
 80013b4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80013b8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	68a0      	ldr	r0, [r4, #8]
 80013be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80013c2:	4302      	orrs	r2, r0
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	e7bc      	b.n	8001342 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c8:	6862      	ldr	r2, [r4, #4]
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <HAL_RCC_ClockConfig+0x128>)
 80013cc:	2a01      	cmp	r2, #1
 80013ce:	d11d      	bne.n	800140c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d6:	d0a8      	beq.n	800132a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013d8:	4e1b      	ldr	r6, [pc, #108]	; (8001448 <HAL_RCC_ClockConfig+0x128>)
 80013da:	68b3      	ldr	r3, [r6, #8]
 80013dc:	f023 0303 	bic.w	r3, r3, #3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80013e4:	f7ff fc98 	bl	8000d18 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80013ec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ee:	68b3      	ldr	r3, [r6, #8]
 80013f0:	6862      	ldr	r2, [r4, #4]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013fa:	d0a4      	beq.n	8001346 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013fc:	f7ff fc8c 	bl	8000d18 <HAL_GetTick>
 8001400:	1bc0      	subs	r0, r0, r7
 8001402:	4540      	cmp	r0, r8
 8001404:	d9f3      	bls.n	80013ee <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001406:	2003      	movs	r0, #3
}
 8001408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800140c:	1e91      	subs	r1, r2, #2
 800140e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001410:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001412:	d802      	bhi.n	800141a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001414:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001418:	e7dd      	b.n	80013d6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141a:	f013 0f02 	tst.w	r3, #2
 800141e:	e7da      	b.n	80013d6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001420:	b2ea      	uxtb	r2, r5
 8001422:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	429d      	cmp	r5, r3
 800142c:	f47f af7d 	bne.w	800132a <HAL_RCC_ClockConfig+0xa>
 8001430:	e78f      	b.n	8001352 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001432:	4905      	ldr	r1, [pc, #20]	; (8001448 <HAL_RCC_ClockConfig+0x128>)
 8001434:	68e0      	ldr	r0, [r4, #12]
 8001436:	688b      	ldr	r3, [r1, #8]
 8001438:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800143c:	4303      	orrs	r3, r0
 800143e:	608b      	str	r3, [r1, #8]
 8001440:	e78a      	b.n	8001358 <HAL_RCC_ClockConfig+0x38>
 8001442:	bf00      	nop
 8001444:	40023c00 	.word	0x40023c00
 8001448:	40023800 	.word	0x40023800
 800144c:	08001854 	.word	0x08001854
 8001450:	20000000 	.word	0x20000000

08001454 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001454:	4b01      	ldr	r3, [pc, #4]	; (800145c <HAL_RCC_GetHCLKFreq+0x8>)
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000000 	.word	0x20000000

08001460 <delay>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void delay(uint32_t delayCount)
{
 8001460:	b082      	sub	sp, #8
	volatile uint32_t i;
	for(i=0;i<delayCount;i++);
 8001462:	2300      	movs	r3, #0
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	9b01      	ldr	r3, [sp, #4]
 8001468:	4283      	cmp	r3, r0
 800146a:	d301      	bcc.n	8001470 <delay+0x10>
}
 800146c:	b002      	add	sp, #8
 800146e:	4770      	bx	lr
	for(i=0;i<delayCount;i++);
 8001470:	9b01      	ldr	r3, [sp, #4]
 8001472:	3301      	adds	r3, #1
 8001474:	e7f6      	b.n	8001464 <delay+0x4>

08001476 <DutyGenerator>:

void DutyGenerator(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,uint8_t v_dutyCycle_u8,uint16_t V_timePeriod_u16)
{
 8001476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t v_tOn_u16, v_tOff_u16;
  v_tOn_u16 = (v_dutyCycle_u8 * V_timePeriod_u16) / 100;
 8001478:	435a      	muls	r2, r3
 800147a:	2564      	movs	r5, #100	; 0x64
 800147c:	fb92 f5f5 	sdiv	r5, r2, r5
  v_tOff_u16 = (V_timePeriod_u16 - v_tOn_u16 );
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  HAL_GPIO_WritePin(GPIOx,GPIO_Pin,GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
  v_tOff_u16 = (V_timePeriod_u16 - v_tOn_u16 );
 8001482:	1b5b      	subs	r3, r3, r5
 8001484:	b29c      	uxth	r4, r3
{
 8001486:	4606      	mov	r6, r0
 8001488:	460f      	mov	r7, r1
  HAL_GPIO_WritePin(GPIOx,GPIO_Pin,GPIO_PIN_SET);
 800148a:	f7ff fd9f 	bl	8000fcc <HAL_GPIO_WritePin>
  delay(v_tOn_u16);
 800148e:	b2a8      	uxth	r0, r5
 8001490:	f7ff ffe6 	bl	8001460 <delay>
  HAL_GPIO_WritePin(GPIOx,GPIO_Pin,GPIO_PIN_RESET);
 8001494:	4630      	mov	r0, r6
 8001496:	4639      	mov	r1, r7
 8001498:	2200      	movs	r2, #0
 800149a:	f7ff fd97 	bl	8000fcc <HAL_GPIO_WritePin>
  delay(v_tOff_u16);
 800149e:	4620      	mov	r0, r4

}
 80014a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(v_tOff_u16);
 80014a4:	f7ff bfdc 	b.w	8001460 <delay>

080014a8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80014a8:	b530      	push	{r4, r5, lr}
 80014aa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <SystemClock_Config+0xa8>)
 80014ae:	2100      	movs	r1, #0
 80014b0:	9101      	str	r1, [sp, #4]
 80014b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <SystemClock_Config+0xac>)
 80014c6:	9102      	str	r1, [sp, #8]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014da:	2301      	movs	r3, #1
 80014dc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014e8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014ea:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ec:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014ee:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014f0:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014f2:	f44f 73a8 	mov.w	r3, #336	; 0x150
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f8:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014fa:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014fc:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014fe:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001500:	f7ff fd6a 	bl	8000fd8 <HAL_RCC_OscConfig>
 8001504:	b100      	cbz	r0, 8001508 <SystemClock_Config+0x60>
 8001506:	e7fe      	b.n	8001506 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001508:	230f      	movs	r3, #15
 800150a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001510:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001516:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001518:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800151c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151e:	f7ff feff 	bl	8001320 <HAL_RCC_ClockConfig>
 8001522:	4604      	mov	r4, r0
 8001524:	b100      	cbz	r0, 8001528 <SystemClock_Config+0x80>
 8001526:	e7fe      	b.n	8001526 <SystemClock_Config+0x7e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001528:	f7ff ff94 	bl	8001454 <HAL_RCC_GetHCLKFreq>
 800152c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001530:	fbb0 f0f3 	udiv	r0, r0, r3
 8001534:	f7ff fc3c 	bl	8000db0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001538:	4628      	mov	r0, r5
 800153a:	f7ff fc4f 	bl	8000ddc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800153e:	4622      	mov	r2, r4
 8001540:	4621      	mov	r1, r4
 8001542:	f04f 30ff 	mov.w	r0, #4294967295
 8001546:	f7ff fbff 	bl	8000d48 <HAL_NVIC_SetPriority>
}
 800154a:	b015      	add	sp, #84	; 0x54
 800154c:	bd30      	pop	{r4, r5, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40007000 	.word	0x40007000

08001558 <main>:
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155c:	2400      	movs	r4, #0
  HAL_Init();
 800155e:	f7ff fbb9 	bl	8000cd4 <HAL_Init>
  SystemClock_Config();
 8001562:	f7ff ffa1 	bl	80014a8 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001566:	4b54      	ldr	r3, [pc, #336]	; (80016b8 <main+0x160>)
 8001568:	9400      	str	r4, [sp, #0]
 800156a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800156c:	4853      	ldr	r0, [pc, #332]	; (80016bc <main+0x164>)
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 800156e:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80016c0 <main+0x168>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001572:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001576:	631a      	str	r2, [r3, #48]	; 0x30
 8001578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800157e:	9200      	str	r2, [sp, #0]
 8001580:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	9401      	str	r4, [sp, #4]
 8001584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
 800158c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158e:	f002 0201 	and.w	r2, r2, #1
 8001592:	9201      	str	r2, [sp, #4]
 8001594:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001596:	9402      	str	r4, [sp, #8]
 8001598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159a:	f042 0208 	orr.w	r2, r2, #8
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80015a6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80015aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ae:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015b0:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80015b2:	f7ff fd0b 	bl	8000fcc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	a903      	add	r1, sp, #12
 80015b8:	4841      	ldr	r0, [pc, #260]	; (80016c0 <main+0x168>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ba:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f7ff fc1e 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c8:	a903      	add	r1, sp, #12
 80015ca:	483c      	ldr	r0, [pc, #240]	; (80016bc <main+0x164>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015d2:	9303      	str	r3, [sp, #12]
		  delay(( T * ( downCnt * 0.1 )));
 80015d4:	a736      	add	r7, pc, #216	; (adr r7, 80016b0 <main+0x158>)
 80015d6:	e9d7 6700 	ldrd	r6, r7, [r7]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f7ff fc11 	bl	8000e00 <HAL_GPIO_Init>
		  delay(( T * ( downCnt * 0.1 )));
 80015de:	4d39      	ldr	r5, [pc, #228]	; (80016c4 <main+0x16c>)
 80015e0:	2400      	movs	r4, #0
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 80015e2:	2101      	movs	r1, #1
 80015e4:	4648      	mov	r0, r9
 80015e6:	f7ff fceb 	bl	8000fc0 <HAL_GPIO_ReadPin>
 80015ea:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80016cc <main+0x174>
 80015ee:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <main+0x170>)
 80015f0:	b190      	cbz	r0, 8001618 <main+0xc0>
          keyPress = 1;
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
	  if(cnt <= 9)
 80015f6:	f898 2000 	ldrb.w	r2, [r8]
 80015fa:	2a09      	cmp	r2, #9
 80015fc:	d816      	bhi.n	800162c <main+0xd4>
		     DutyGenerator(GPIOD,GPIO_PIN_12,(cnt*10),T);
 80015fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001602:	0052      	lsls	r2, r2, #1
 8001604:	f240 234e 	movw	r3, #590	; 0x24e
 8001608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800160c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001610:	482a      	ldr	r0, [pc, #168]	; (80016bc <main+0x164>)
 8001612:	f7ff ff30 	bl	8001476 <DutyGenerator>
 8001616:	e7e4      	b.n	80015e2 <main+0x8a>
	  else if(keyPress == 1 )
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	2a01      	cmp	r2, #1
		  cnt++;
 800161c:	bf01      	itttt	eq
 800161e:	f898 2000 	ldrbeq.w	r2, [r8]
		  keyPress =0;
 8001622:	7018      	strbeq	r0, [r3, #0]
		  cnt++;
 8001624:	3201      	addeq	r2, #1
 8001626:	f888 2000 	strbeq.w	r2, [r8]
 800162a:	e7e4      	b.n	80015f6 <main+0x9e>
		  downCnt = 9-( cnt - 9);
 800162c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 80016d0 <main+0x178>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 8001630:	4822      	ldr	r0, [pc, #136]	; (80016bc <main+0x164>)
		  downCnt = 9-( cnt - 9);
 8001632:	f1c2 0212 	rsb	r2, r2, #18
 8001636:	f88a 2000 	strb.w	r2, [sl]
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 800163a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800163e:	2201      	movs	r2, #1
 8001640:	f7ff fcc4 	bl	8000fcc <HAL_GPIO_WritePin>
		  delay(( T * ( downCnt * 0.1 )));
 8001644:	f89a 0000 	ldrb.w	r0, [sl]
 8001648:	f7fe ff10 	bl	800046c <__aeabi_i2d>
 800164c:	4632      	mov	r2, r6
 800164e:	463b      	mov	r3, r7
 8001650:	f7fe ff72 	bl	8000538 <__aeabi_dmul>
 8001654:	462b      	mov	r3, r5
 8001656:	4622      	mov	r2, r4
 8001658:	f7fe ff6e 	bl	8000538 <__aeabi_dmul>
 800165c:	f7ff f97e 	bl	800095c <__aeabi_d2uiz>
 8001660:	f7ff fefe 	bl	8001460 <delay>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800166a:	4814      	ldr	r0, [pc, #80]	; (80016bc <main+0x164>)
 800166c:	f7ff fcae 	bl	8000fcc <HAL_GPIO_WritePin>
	      delay((T - ( T * ( downCnt * 0.1 ))));
 8001670:	f89a a000 	ldrb.w	sl, [sl]
 8001674:	4650      	mov	r0, sl
 8001676:	f7fe fef9 	bl	800046c <__aeabi_i2d>
 800167a:	4632      	mov	r2, r6
 800167c:	463b      	mov	r3, r7
 800167e:	f7fe ff5b 	bl	8000538 <__aeabi_dmul>
 8001682:	4622      	mov	r2, r4
 8001684:	462b      	mov	r3, r5
 8001686:	f7fe ff57 	bl	8000538 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4620      	mov	r0, r4
 8001690:	4629      	mov	r1, r5
 8001692:	f7fe fd9d 	bl	80001d0 <__aeabi_dsub>
 8001696:	f7ff f961 	bl	800095c <__aeabi_d2uiz>
 800169a:	f7ff fee1 	bl	8001460 <delay>
	      if(downCnt == 1)
 800169e:	f1ba 0f01 	cmp.w	sl, #1
 80016a2:	d19e      	bne.n	80015e2 <main+0x8a>
	    	  cnt =1;
 80016a4:	f888 a000 	strb.w	sl, [r8]
 80016a8:	e79b      	b.n	80015e2 <main+0x8a>
 80016aa:	bf00      	nop
 80016ac:	f3af 8000 	nop.w
 80016b0:	9999999a 	.word	0x9999999a
 80016b4:	3fb99999 	.word	0x3fb99999
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40827000 	.word	0x40827000
 80016c8:	20000022 	.word	0x20000022
 80016cc:	20000020 	.word	0x20000020
 80016d0:	20000021 	.word	0x20000021

080016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d6:	2003      	movs	r0, #3
 80016d8:	f7ff fb24 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	4611      	mov	r1, r2
 80016e0:	f06f 000b 	mvn.w	r0, #11
 80016e4:	f7ff fb30 	bl	8000d48 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	4611      	mov	r1, r2
 80016ec:	f06f 000a 	mvn.w	r0, #10
 80016f0:	f7ff fb2a 	bl	8000d48 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	4611      	mov	r1, r2
 80016f8:	f06f 0009 	mvn.w	r0, #9
 80016fc:	f7ff fb24 	bl	8000d48 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	4611      	mov	r1, r2
 8001704:	f06f 0004 	mvn.w	r0, #4
 8001708:	f7ff fb1e 	bl	8000d48 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	4611      	mov	r1, r2
 8001710:	f06f 0003 	mvn.w	r0, #3
 8001714:	f7ff fb18 	bl	8000d48 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	4611      	mov	r1, r2
 800171c:	f06f 0001 	mvn.w	r0, #1
 8001720:	f7ff fb12 	bl	8000d48 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	4611      	mov	r1, r2
 8001728:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001730:	f7ff bb0a 	b.w	8000d48 <HAL_NVIC_SetPriority>

08001734 <NMI_Handler>:
 8001734:	4770      	bx	lr

08001736 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler>

08001738 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001738:	e7fe      	b.n	8001738 <MemManage_Handler>

0800173a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800173a:	e7fe      	b.n	800173a <BusFault_Handler>

0800173c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler>

0800173e <SVC_Handler>:
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:
 8001740:	4770      	bx	lr

08001742 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001744:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001746:	f7ff fadf 	bl	8000d08 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800174e:	f7ff bb52 	b.w	8000df6 <HAL_SYSTICK_IRQHandler>
	...

08001754 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	490f      	ldr	r1, [pc, #60]	; (8001794 <SystemInit+0x40>)
 8001756:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800175a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <SystemInit+0x44>)
 8001764:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001766:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800176e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001776:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800177a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <SystemInit+0x48>)
 800177e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001786:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001788:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800178a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800178e:	608b      	str	r3, [r1, #8]
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00
 8001798:	40023800 	.word	0x40023800
 800179c:	24003010 	.word	0x24003010

080017a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017a6:	e003      	b.n	80017b0 <LoopCopyDataInit>

080017a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017ae:	3104      	adds	r1, #4

080017b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017b8:	d3f6      	bcc.n	80017a8 <CopyDataInit>
  ldr  r2, =_sbss
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017bc:	e002      	b.n	80017c4 <LoopFillZerobss>

080017be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017c0:	f842 3b04 	str.w	r3, [r2], #4

080017c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017c8:	d3f9      	bcc.n	80017be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ca:	f7ff ffc3 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f000 f811 	bl	80017f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d2:	f7ff fec1 	bl	8001558 <main>
  bx  lr    
 80017d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017dc:	08001874 	.word	0x08001874
  ldr  r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017e4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80017e8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80017ec:	20000028 	.word	0x20000028

080017f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC_IRQHandler>
	...

080017f4 <__libc_init_array>:
 80017f4:	b570      	push	{r4, r5, r6, lr}
 80017f6:	4e0d      	ldr	r6, [pc, #52]	; (800182c <__libc_init_array+0x38>)
 80017f8:	4c0d      	ldr	r4, [pc, #52]	; (8001830 <__libc_init_array+0x3c>)
 80017fa:	1ba4      	subs	r4, r4, r6
 80017fc:	10a4      	asrs	r4, r4, #2
 80017fe:	2500      	movs	r5, #0
 8001800:	42a5      	cmp	r5, r4
 8001802:	d109      	bne.n	8001818 <__libc_init_array+0x24>
 8001804:	4e0b      	ldr	r6, [pc, #44]	; (8001834 <__libc_init_array+0x40>)
 8001806:	4c0c      	ldr	r4, [pc, #48]	; (8001838 <__libc_init_array+0x44>)
 8001808:	f000 f818 	bl	800183c <_init>
 800180c:	1ba4      	subs	r4, r4, r6
 800180e:	10a4      	asrs	r4, r4, #2
 8001810:	2500      	movs	r5, #0
 8001812:	42a5      	cmp	r5, r4
 8001814:	d105      	bne.n	8001822 <__libc_init_array+0x2e>
 8001816:	bd70      	pop	{r4, r5, r6, pc}
 8001818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800181c:	4798      	blx	r3
 800181e:	3501      	adds	r5, #1
 8001820:	e7ee      	b.n	8001800 <__libc_init_array+0xc>
 8001822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001826:	4798      	blx	r3
 8001828:	3501      	adds	r5, #1
 800182a:	e7f2      	b.n	8001812 <__libc_init_array+0x1e>
 800182c:	0800186c 	.word	0x0800186c
 8001830:	0800186c 	.word	0x0800186c
 8001834:	0800186c 	.word	0x0800186c
 8001838:	08001870 	.word	0x08001870

0800183c <_init>:
 800183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183e:	bf00      	nop
 8001840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001842:	bc08      	pop	{r3}
 8001844:	469e      	mov	lr, r3
 8001846:	4770      	bx	lr

08001848 <_fini>:
 8001848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184a:	bf00      	nop
 800184c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800184e:	bc08      	pop	{r3}
 8001850:	469e      	mov	lr, r3
 8001852:	4770      	bx	lr
