
ADC2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002180  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002308  08002308  00012308  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002320  08002320  00012320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002328  08002328  00012328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800232c  0800232c  0001232c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08002330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          000000b8  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000bc  200000bc  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f377  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000224c  00000000  00000000  0002f3ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003772  00000000  00000000  000315f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a8  00000000  00000000  00034d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000828  00000000  00000000  00035418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004035  00000000  00000000  00035c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002bcf  00000000  00000000  00039c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003c844  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001270  00000000  00000000  0003c8c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022f0 	.word	0x080022f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080022f0 	.word	0x080022f0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295
 80009b0:	f000 b97a 	b.w	8000ca8 <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	468c      	mov	ip, r1
 80009d2:	460d      	mov	r5, r1
 80009d4:	4604      	mov	r4, r0
 80009d6:	9e08      	ldr	r6, [sp, #32]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d151      	bne.n	8000a80 <__udivmoddi4+0xb4>
 80009dc:	428a      	cmp	r2, r1
 80009de:	4617      	mov	r7, r2
 80009e0:	d96d      	bls.n	8000abe <__udivmoddi4+0xf2>
 80009e2:	fab2 fe82 	clz	lr, r2
 80009e6:	f1be 0f00 	cmp.w	lr, #0
 80009ea:	d00b      	beq.n	8000a04 <__udivmoddi4+0x38>
 80009ec:	f1ce 0c20 	rsb	ip, lr, #32
 80009f0:	fa01 f50e 	lsl.w	r5, r1, lr
 80009f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009f8:	fa02 f70e 	lsl.w	r7, r2, lr
 80009fc:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a00:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a04:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a08:	0c25      	lsrs	r5, r4, #16
 8000a0a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a0e:	fa1f f987 	uxth.w	r9, r7
 8000a12:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a16:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a1a:	fb08 f309 	mul.w	r3, r8, r9
 8000a1e:	42ab      	cmp	r3, r5
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x6c>
 8000a22:	19ed      	adds	r5, r5, r7
 8000a24:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a28:	f080 8123 	bcs.w	8000c72 <__udivmoddi4+0x2a6>
 8000a2c:	42ab      	cmp	r3, r5
 8000a2e:	f240 8120 	bls.w	8000c72 <__udivmoddi4+0x2a6>
 8000a32:	f1a8 0802 	sub.w	r8, r8, #2
 8000a36:	443d      	add	r5, r7
 8000a38:	1aed      	subs	r5, r5, r3
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a40:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a48:	fb00 f909 	mul.w	r9, r0, r9
 8000a4c:	45a1      	cmp	r9, r4
 8000a4e:	d909      	bls.n	8000a64 <__udivmoddi4+0x98>
 8000a50:	19e4      	adds	r4, r4, r7
 8000a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a56:	f080 810a 	bcs.w	8000c6e <__udivmoddi4+0x2a2>
 8000a5a:	45a1      	cmp	r9, r4
 8000a5c:	f240 8107 	bls.w	8000c6e <__udivmoddi4+0x2a2>
 8000a60:	3802      	subs	r0, #2
 8000a62:	443c      	add	r4, r7
 8000a64:	eba4 0409 	sub.w	r4, r4, r9
 8000a68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d061      	beq.n	8000b36 <__udivmoddi4+0x16a>
 8000a72:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a76:	2300      	movs	r3, #0
 8000a78:	6034      	str	r4, [r6, #0]
 8000a7a:	6073      	str	r3, [r6, #4]
 8000a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a80:	428b      	cmp	r3, r1
 8000a82:	d907      	bls.n	8000a94 <__udivmoddi4+0xc8>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d054      	beq.n	8000b32 <__udivmoddi4+0x166>
 8000a88:	2100      	movs	r1, #0
 8000a8a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000a8e:	4608      	mov	r0, r1
 8000a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a94:	fab3 f183 	clz	r1, r3
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	f040 808e 	bne.w	8000bba <__udivmoddi4+0x1ee>
 8000a9e:	42ab      	cmp	r3, r5
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xdc>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80fa 	bhi.w	8000c9c <__udivmoddi4+0x2d0>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb65 0503 	sbc.w	r5, r5, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	46ac      	mov	ip, r5
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d03f      	beq.n	8000b36 <__udivmoddi4+0x16a>
 8000ab6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	b912      	cbnz	r2, 8000ac6 <__udivmoddi4+0xfa>
 8000ac0:	2701      	movs	r7, #1
 8000ac2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ac6:	fab7 fe87 	clz	lr, r7
 8000aca:	f1be 0f00 	cmp.w	lr, #0
 8000ace:	d134      	bne.n	8000b3a <__udivmoddi4+0x16e>
 8000ad0:	1beb      	subs	r3, r5, r7
 8000ad2:	0c3a      	lsrs	r2, r7, #16
 8000ad4:	fa1f fc87 	uxth.w	ip, r7
 8000ad8:	2101      	movs	r1, #1
 8000ada:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ade:	0c25      	lsrs	r5, r4, #16
 8000ae0:	fb02 3318 	mls	r3, r2, r8, r3
 8000ae4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ae8:	fb0c f308 	mul.w	r3, ip, r8
 8000aec:	42ab      	cmp	r3, r5
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0x134>
 8000af0:	19ed      	adds	r5, r5, r7
 8000af2:	f108 30ff 	add.w	r0, r8, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x132>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	f200 80d1 	bhi.w	8000ca0 <__udivmoddi4+0x2d4>
 8000afe:	4680      	mov	r8, r0
 8000b00:	1aed      	subs	r5, r5, r3
 8000b02:	b2a3      	uxth	r3, r4
 8000b04:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b08:	fb02 5510 	mls	r5, r2, r0, r5
 8000b0c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b10:	fb0c fc00 	mul.w	ip, ip, r0
 8000b14:	45a4      	cmp	ip, r4
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x15c>
 8000b18:	19e4      	adds	r4, r4, r7
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x15a>
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	f200 80b8 	bhi.w	8000c96 <__udivmoddi4+0x2ca>
 8000b26:	4618      	mov	r0, r3
 8000b28:	eba4 040c 	sub.w	r4, r4, ip
 8000b2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b30:	e79d      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000b32:	4631      	mov	r1, r6
 8000b34:	4630      	mov	r0, r6
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	f1ce 0420 	rsb	r4, lr, #32
 8000b3e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b42:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b46:	fa20 f804 	lsr.w	r8, r0, r4
 8000b4a:	0c3a      	lsrs	r2, r7, #16
 8000b4c:	fa25 f404 	lsr.w	r4, r5, r4
 8000b50:	ea48 0803 	orr.w	r8, r8, r3
 8000b54:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b58:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b5c:	fb02 4411 	mls	r4, r2, r1, r4
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b68:	fb01 f30c 	mul.w	r3, r1, ip
 8000b6c:	42ab      	cmp	r3, r5
 8000b6e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x1bc>
 8000b74:	19ed      	adds	r5, r5, r7
 8000b76:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b7a:	f080 808a 	bcs.w	8000c92 <__udivmoddi4+0x2c6>
 8000b7e:	42ab      	cmp	r3, r5
 8000b80:	f240 8087 	bls.w	8000c92 <__udivmoddi4+0x2c6>
 8000b84:	3902      	subs	r1, #2
 8000b86:	443d      	add	r5, r7
 8000b88:	1aeb      	subs	r3, r5, r3
 8000b8a:	fa1f f588 	uxth.w	r5, r8
 8000b8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000b92:	fb02 3310 	mls	r3, r2, r0, r3
 8000b96:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b9a:	fb00 f30c 	mul.w	r3, r0, ip
 8000b9e:	42ab      	cmp	r3, r5
 8000ba0:	d907      	bls.n	8000bb2 <__udivmoddi4+0x1e6>
 8000ba2:	19ed      	adds	r5, r5, r7
 8000ba4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ba8:	d26f      	bcs.n	8000c8a <__udivmoddi4+0x2be>
 8000baa:	42ab      	cmp	r3, r5
 8000bac:	d96d      	bls.n	8000c8a <__udivmoddi4+0x2be>
 8000bae:	3802      	subs	r0, #2
 8000bb0:	443d      	add	r5, r7
 8000bb2:	1aeb      	subs	r3, r5, r3
 8000bb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb8:	e78f      	b.n	8000ada <__udivmoddi4+0x10e>
 8000bba:	f1c1 0720 	rsb	r7, r1, #32
 8000bbe:	fa22 f807 	lsr.w	r8, r2, r7
 8000bc2:	408b      	lsls	r3, r1
 8000bc4:	fa05 f401 	lsl.w	r4, r5, r1
 8000bc8:	ea48 0303 	orr.w	r3, r8, r3
 8000bcc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000bd0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000bda:	fbb5 f9fc 	udiv	r9, r5, ip
 8000bde:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000be2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000be6:	fa1f f883 	uxth.w	r8, r3
 8000bea:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000bee:	fb09 f408 	mul.w	r4, r9, r8
 8000bf2:	42ac      	cmp	r4, r5
 8000bf4:	fa02 f201 	lsl.w	r2, r2, r1
 8000bf8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x244>
 8000bfe:	18ed      	adds	r5, r5, r3
 8000c00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c04:	d243      	bcs.n	8000c8e <__udivmoddi4+0x2c2>
 8000c06:	42ac      	cmp	r4, r5
 8000c08:	d941      	bls.n	8000c8e <__udivmoddi4+0x2c2>
 8000c0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0e:	441d      	add	r5, r3
 8000c10:	1b2d      	subs	r5, r5, r4
 8000c12:	fa1f fe8e 	uxth.w	lr, lr
 8000c16:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c1a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c1e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c22:	fb00 f808 	mul.w	r8, r0, r8
 8000c26:	45a0      	cmp	r8, r4
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x26e>
 8000c2a:	18e4      	adds	r4, r4, r3
 8000c2c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c30:	d229      	bcs.n	8000c86 <__udivmoddi4+0x2ba>
 8000c32:	45a0      	cmp	r8, r4
 8000c34:	d927      	bls.n	8000c86 <__udivmoddi4+0x2ba>
 8000c36:	3802      	subs	r0, #2
 8000c38:	441c      	add	r4, r3
 8000c3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3e:	eba4 0408 	sub.w	r4, r4, r8
 8000c42:	fba0 8902 	umull	r8, r9, r0, r2
 8000c46:	454c      	cmp	r4, r9
 8000c48:	46c6      	mov	lr, r8
 8000c4a:	464d      	mov	r5, r9
 8000c4c:	d315      	bcc.n	8000c7a <__udivmoddi4+0x2ae>
 8000c4e:	d012      	beq.n	8000c76 <__udivmoddi4+0x2aa>
 8000c50:	b156      	cbz	r6, 8000c68 <__udivmoddi4+0x29c>
 8000c52:	ebba 030e 	subs.w	r3, sl, lr
 8000c56:	eb64 0405 	sbc.w	r4, r4, r5
 8000c5a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c5e:	40cb      	lsrs	r3, r1
 8000c60:	431f      	orrs	r7, r3
 8000c62:	40cc      	lsrs	r4, r1
 8000c64:	6037      	str	r7, [r6, #0]
 8000c66:	6074      	str	r4, [r6, #4]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	e6f8      	b.n	8000a64 <__udivmoddi4+0x98>
 8000c72:	4690      	mov	r8, r2
 8000c74:	e6e0      	b.n	8000a38 <__udivmoddi4+0x6c>
 8000c76:	45c2      	cmp	sl, r8
 8000c78:	d2ea      	bcs.n	8000c50 <__udivmoddi4+0x284>
 8000c7a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7e:	eb69 0503 	sbc.w	r5, r9, r3
 8000c82:	3801      	subs	r0, #1
 8000c84:	e7e4      	b.n	8000c50 <__udivmoddi4+0x284>
 8000c86:	4628      	mov	r0, r5
 8000c88:	e7d7      	b.n	8000c3a <__udivmoddi4+0x26e>
 8000c8a:	4640      	mov	r0, r8
 8000c8c:	e791      	b.n	8000bb2 <__udivmoddi4+0x1e6>
 8000c8e:	4681      	mov	r9, r0
 8000c90:	e7be      	b.n	8000c10 <__udivmoddi4+0x244>
 8000c92:	4601      	mov	r1, r0
 8000c94:	e778      	b.n	8000b88 <__udivmoddi4+0x1bc>
 8000c96:	3802      	subs	r0, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	e745      	b.n	8000b28 <__udivmoddi4+0x15c>
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e708      	b.n	8000ab2 <__udivmoddi4+0xe6>
 8000ca0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca4:	443d      	add	r5, r7
 8000ca6:	e72b      	b.n	8000b00 <__udivmoddi4+0x134>

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_InitTick+0x24>)
{
 8000cb0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cbc:	f000 fb0a 	bl	80012d4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4621      	mov	r1, r4
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 fac4 	bl	8001254 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000ccc:	2000      	movs	r0, #0
 8000cce:	bd10      	pop	{r4, pc}
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <HAL_Init>:
{
 8000cd4:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x30>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cde:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ce6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cee:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 fa9d 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ffd8 	bl	8000cac <HAL_InitTick>
  HAL_MspInit();
 8000cfc:	f001 f9de 	bl	80020bc <HAL_MspInit>
}
 8000d00:	2000      	movs	r0, #0
 8000d02:	bd08      	pop	{r3, pc}
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d08:	4a02      	ldr	r2, [pc, #8]	; (8000d14 <HAL_IncTick+0xc>)
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000028 	.word	0x20000028

08000d18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d18:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <HAL_GetTick+0x8>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000028 	.word	0x20000028

08000d24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d24:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d26:	4604      	mov	r4, r0
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	f000 8099 	beq.w	8000e60 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000d30:	b923      	cbnz	r3, 8000d3c <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d32:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d38:	f001 f9f0 	bl	800211c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d3e:	06db      	lsls	r3, r3, #27
 8000d40:	f100 808c 	bmi.w	8000e5c <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d4a:	f023 0302 	bic.w	r3, r3, #2
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000d54:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <HAL_ADC_Init+0x140>)
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000d5c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	6861      	ldr	r1, [r4, #4]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000d66:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000d68:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000d7a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000d7c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000d7e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000d82:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000d8a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000d8c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d9a:	4933      	ldr	r1, [pc, #204]	; (8000e68 <HAL_ADC_Init+0x144>)
 8000d9c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d9e:	428a      	cmp	r2, r1
 8000da0:	d050      	beq.n	8000e44 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000da2:	6899      	ldr	r1, [r3, #8]
 8000da4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000da8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000daa:	6899      	ldr	r1, [r3, #8]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000db0:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000db2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000db4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000db8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000dbe:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000dc0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000dc2:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000dc4:	f022 0202 	bic.w	r2, r2, #2
 8000dc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000dd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000dd2:	6a22      	ldr	r2, [r4, #32]
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	d03d      	beq.n	8000e54 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000dd8:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000dda:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000de0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000de8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	3901      	subs	r1, #1
 8000dee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000df2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000df6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000df8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e00:	3901      	subs	r1, #1
 8000e02:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e08:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000e18:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e1a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e1c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e24:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e26:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e28:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000e2c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e2e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e32:	f023 0303 	bic.w	r3, r3, #3
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000e42:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e52:	e7b4      	b.n	8000dbe <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e5a:	e7ca      	b.n	8000df2 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	e7ed      	b.n	8000e3c <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000e60:	2001      	movs	r0, #1
}
 8000e62:	bd10      	pop	{r4, pc}
 8000e64:	40012300 	.word	0x40012300
 8000e68:	0f000001 	.word	0x0f000001

08000e6c <HAL_ADC_Start>:
{
 8000e6c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000e72:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d04e      	beq.n	8000f18 <HAL_ADC_Start+0xac>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e80:	6803      	ldr	r3, [r0, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	07d1      	lsls	r1, r2, #31
 8000e86:	d505      	bpl.n	8000e94 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	07d2      	lsls	r2, r2, #31
 8000e8c:	d414      	bmi.n	8000eb8 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8000e8e:	2000      	movs	r0, #0
}
 8000e90:	b002      	add	sp, #8
 8000e92:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000e94:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e96:	4921      	ldr	r1, [pc, #132]	; (8000f1c <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8000e98:	f042 0201 	orr.w	r2, r2, #1
 8000e9c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e9e:	4a20      	ldr	r2, [pc, #128]	; (8000f20 <HAL_ADC_Start+0xb4>)
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	fbb2 f2f1 	udiv	r2, r2, r1
 8000ea6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000eaa:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000eac:	9a01      	ldr	r2, [sp, #4]
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d0ea      	beq.n	8000e88 <HAL_ADC_Start+0x1c>
      counter--;
 8000eb2:	9a01      	ldr	r2, [sp, #4]
 8000eb4:	3a01      	subs	r2, #1
 8000eb6:	e7f8      	b.n	8000eaa <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000eb8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000eba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ec6:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ecc:	bf41      	itttt	mi
 8000ece:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000ed0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000ed4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000ed8:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eda:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ee0:	bf1c      	itt	ne
 8000ee2:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000ee4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000ee8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ef0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ef4:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <HAL_ADC_Start+0xb8>)
 8000ef8:	6852      	ldr	r2, [r2, #4]
 8000efa:	06d2      	lsls	r2, r2, #27
 8000efc:	d108      	bne.n	8000f10 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000efe:	6898      	ldr	r0, [r3, #8]
 8000f00:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000f04:	d1c3      	bne.n	8000e8e <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	e7bf      	b.n	8000e90 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f10:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <HAL_ADC_Start+0xbc>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d1bb      	bne.n	8000e8e <HAL_ADC_Start+0x22>
 8000f16:	e7f2      	b.n	8000efe <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	e7b9      	b.n	8000e90 <HAL_ADC_Start+0x24>
 8000f1c:	000f4240 	.word	0x000f4240
 8000f20:	20000000 	.word	0x20000000
 8000f24:	40012300 	.word	0x40012300
 8000f28:	40012000 	.word	0x40012000

08000f2c <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f2c:	6803      	ldr	r3, [r0, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
{
 8000f30:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f32:	0556      	lsls	r6, r2, #21
{
 8000f34:	4604      	mov	r4, r0
 8000f36:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f38:	d50b      	bpl.n	8000f52 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000f3a:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f3c:	05d8      	lsls	r0, r3, #23
 8000f3e:	d508      	bpl.n	8000f52 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f42:	f043 0320 	orr.w	r3, r3, #32
 8000f46:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8000f4e:	2001      	movs	r0, #1
 8000f50:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8000f52:	f7ff fee1 	bl	8000d18 <HAL_GetTick>
 8000f56:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	0792      	lsls	r2, r2, #30
 8000f5e:	d50c      	bpl.n	8000f7a <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f60:	f06f 0212 	mvn.w	r2, #18
 8000f64:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f6c:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000f74:	d013      	beq.n	8000f9e <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8000f76:	2000      	movs	r0, #0
 8000f78:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000f7a:	1c69      	adds	r1, r5, #1
 8000f7c:	d0ed      	beq.n	8000f5a <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f7e:	b945      	cbnz	r5, 8000f92 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000f8e:	2003      	movs	r0, #3
 8000f90:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f92:	f7ff fec1 	bl	8000d18 <HAL_GetTick>
 8000f96:	1b80      	subs	r0, r0, r6
 8000f98:	4285      	cmp	r5, r0
 8000f9a:	d2dd      	bcs.n	8000f58 <HAL_ADC_PollForConversion+0x2c>
 8000f9c:	e7f0      	b.n	8000f80 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f9e:	69a2      	ldr	r2, [r4, #24]
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d1e8      	bne.n	8000f76 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fa6:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000faa:	d002      	beq.n	8000fb2 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000fac:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fae:	055b      	lsls	r3, r3, #21
 8000fb0:	d4e1      	bmi.n	8000f76 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fb8:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000fbc:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000fc0:	d1d9      	bne.n	8000f76 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6423      	str	r3, [r4, #64]	; 0x40
}
 8000fca:	bd70      	pop	{r4, r5, r6, pc}

08000fcc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000fcc:	6803      	ldr	r3, [r0, #0]
 8000fce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_ADC_ConvCpltCallback>:
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_ADC_LevelOutOfWindowCallback>:
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_ADC_ErrorCallback>:
{
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_ADC_IRQHandler>:
{
 8000fd8:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000fda:	6803      	ldr	r3, [r0, #0]
 8000fdc:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000fde:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000fe0:	078d      	lsls	r5, r1, #30
{
 8000fe2:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8000fe4:	d52b      	bpl.n	800103e <HAL_ADC_IRQHandler+0x66>
 8000fe6:	0690      	lsls	r0, r2, #26
 8000fe8:	d529      	bpl.n	800103e <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fec:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fee:	bf5e      	ittt	pl
 8000ff0:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000ff2:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000ff6:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000ffe:	d117      	bne.n	8001030 <HAL_ADC_IRQHandler+0x58>
 8001000:	69a2      	ldr	r2, [r4, #24]
 8001002:	b9aa      	cbnz	r2, 8001030 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001006:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800100a:	d002      	beq.n	8001012 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800100c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800100e:	0552      	lsls	r2, r2, #21
 8001010:	d40e      	bmi.n	8001030 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	f022 0220 	bic.w	r2, r2, #32
 8001018:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800101a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800101c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001020:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001024:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001026:	bf5e      	ittt	pl
 8001028:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 800102a:	f043 0301 	orrpl.w	r3, r3, #1
 800102e:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001030:	4620      	mov	r0, r4
 8001032:	f7ff ffce 	bl	8000fd2 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	f06f 0212 	mvn.w	r2, #18
 800103c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001042:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001044:	074d      	lsls	r5, r1, #29
 8001046:	d532      	bpl.n	80010ae <HAL_ADC_IRQHandler+0xd6>
 8001048:	0610      	lsls	r0, r2, #24
 800104a:	d530      	bpl.n	80010ae <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800104c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800104e:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001050:	bf5e      	ittt	pl
 8001052:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8001054:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001058:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001060:	d11e      	bne.n	80010a0 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001064:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001068:	d002      	beq.n	8001070 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800106a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800106c:	0552      	lsls	r2, r2, #21
 800106e:	d417      	bmi.n	80010a0 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001070:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001072:	0555      	lsls	r5, r2, #21
 8001074:	d414      	bmi.n	80010a0 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001076:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001078:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800107c:	d110      	bne.n	80010a0 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800107e:	69a2      	ldr	r2, [r4, #24]
 8001080:	b972      	cbnz	r2, 80010a0 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001088:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800108a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800108c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001090:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001094:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001096:	bf5e      	ittt	pl
 8001098:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 800109a:	f043 0301 	orrpl.w	r3, r3, #1
 800109e:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010a0:	4620      	mov	r0, r4
 80010a2:	f000 f8c3 	bl	800122c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	f06f 020c 	mvn.w	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80010b2:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80010b4:	07c9      	lsls	r1, r1, #31
 80010b6:	d50f      	bpl.n	80010d8 <HAL_ADC_IRQHandler+0x100>
 80010b8:	0655      	lsls	r5, r2, #25
 80010ba:	d50d      	bpl.n	80010d8 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	07d8      	lsls	r0, r3, #31
 80010c0:	d50a      	bpl.n	80010d8 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff ff82 	bl	8000fd4 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	f06f 0201 	mvn.w	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80010dc:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80010de:	0689      	lsls	r1, r1, #26
 80010e0:	d50d      	bpl.n	80010fe <HAL_ADC_IRQHandler+0x126>
 80010e2:	0152      	lsls	r2, r2, #5
 80010e4:	d50b      	bpl.n	80010fe <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010e8:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010ec:	f042 0202 	orr.w	r2, r2, #2
 80010f0:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 80010f2:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010f4:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 80010f6:	f7ff ff6e 	bl	8000fd6 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	601d      	str	r5, [r3, #0]
 80010fe:	bd38      	pop	{r3, r4, r5, pc}

08001100 <HAL_ADC_ConfigChannel>:
{
 8001100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001102:	2300      	movs	r3, #0
 8001104:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001106:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800110a:	2b01      	cmp	r3, #1
 800110c:	f000 8083 	beq.w	8001216 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001110:	680d      	ldr	r5, [r1, #0]
 8001112:	6804      	ldr	r4, [r0, #0]
 8001114:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8001116:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001118:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800111a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800111e:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001120:	d92a      	bls.n	8001178 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001122:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001126:	68e7      	ldr	r7, [r4, #12]
 8001128:	3b1e      	subs	r3, #30
 800112a:	f04f 0e07 	mov.w	lr, #7
 800112e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001132:	ea27 070e 	bic.w	r7, r7, lr
 8001136:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001138:	68e7      	ldr	r7, [r4, #12]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	433b      	orrs	r3, r7
 8001140:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8001142:	684a      	ldr	r2, [r1, #4]
 8001144:	2a06      	cmp	r2, #6
 8001146:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800114a:	d825      	bhi.n	8001198 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800114c:	4413      	add	r3, r2
 800114e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001150:	1f59      	subs	r1, r3, #5
 8001152:	231f      	movs	r3, #31
 8001154:	408b      	lsls	r3, r1
 8001156:	ea27 0303 	bic.w	r3, r7, r3
 800115a:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800115c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800115e:	fa06 f101 	lsl.w	r1, r6, r1
 8001162:	4311      	orrs	r1, r2
 8001164:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_ADC_ConfigChannel+0x11c>)
 8001168:	429c      	cmp	r4, r3
 800116a:	d034      	beq.n	80011d6 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 800116c:	2300      	movs	r3, #0
 800116e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001172:	4618      	mov	r0, r3
}
 8001174:	b003      	add	sp, #12
 8001176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001178:	6927      	ldr	r7, [r4, #16]
 800117a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800117e:	f04f 0e07 	mov.w	lr, #7
 8001182:	fa0e fe03 	lsl.w	lr, lr, r3
 8001186:	ea27 070e 	bic.w	r7, r7, lr
 800118a:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800118c:	6927      	ldr	r7, [r4, #16]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	433b      	orrs	r3, r7
 8001194:	6123      	str	r3, [r4, #16]
 8001196:	e7d4      	b.n	8001142 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8001198:	2a0c      	cmp	r2, #12
 800119a:	d80e      	bhi.n	80011ba <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800119c:	4413      	add	r3, r2
 800119e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80011a0:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80011a4:	231f      	movs	r3, #31
 80011a6:	4093      	lsls	r3, r2
 80011a8:	ea21 0303 	bic.w	r3, r1, r3
 80011ac:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011b0:	fa06 f202 	lsl.w	r2, r6, r2
 80011b4:	431a      	orrs	r2, r3
 80011b6:	6322      	str	r2, [r4, #48]	; 0x30
 80011b8:	e7d5      	b.n	8001166 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011ba:	4413      	add	r3, r2
 80011bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80011be:	3b41      	subs	r3, #65	; 0x41
 80011c0:	221f      	movs	r2, #31
 80011c2:	409a      	lsls	r2, r3
 80011c4:	ea21 0202 	bic.w	r2, r1, r2
 80011c8:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011cc:	fa06 f103 	lsl.w	r1, r6, r3
 80011d0:	4311      	orrs	r1, r2
 80011d2:	62e1      	str	r1, [r4, #44]	; 0x2c
 80011d4:	e7c7      	b.n	8001166 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011d6:	2d12      	cmp	r5, #18
 80011d8:	d104      	bne.n	80011e4 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011da:	4a11      	ldr	r2, [pc, #68]	; (8001220 <HAL_ADC_ConfigChannel+0x120>)
 80011dc:	6853      	ldr	r3, [r2, #4]
 80011de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e2:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011e4:	f1a5 0310 	sub.w	r3, r5, #16
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d8bf      	bhi.n	800116c <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011ec:	4a0c      	ldr	r2, [pc, #48]	; (8001220 <HAL_ADC_ConfigChannel+0x120>)
 80011ee:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011f0:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011f6:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011f8:	d1b8      	bne.n	800116c <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_ADC_ConfigChannel+0x124>)
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_ADC_ConfigChannel+0x128>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	fbb3 f2f2 	udiv	r2, r3, r2
 8001204:	230a      	movs	r3, #10
 8001206:	4353      	muls	r3, r2
        counter--;
 8001208:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800120a:	9b01      	ldr	r3, [sp, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0ad      	beq.n	800116c <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001210:	9b01      	ldr	r3, [sp, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	e7f8      	b.n	8001208 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8001216:	2002      	movs	r0, #2
 8001218:	e7ac      	b.n	8001174 <HAL_ADC_ConfigChannel+0x74>
 800121a:	bf00      	nop
 800121c:	40012000 	.word	0x40012000
 8001220:	40012300 	.word	0x40012300
 8001224:	20000000 	.word	0x20000000
 8001228:	000f4240 	.word	0x000f4240

0800122c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800122c:	4770      	bx	lr
	...

08001230 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001232:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001234:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001240:	0200      	lsls	r0, r0, #8
 8001242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001246:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800124a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800124c:	60d3      	str	r3, [r2, #12]
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001256:	b530      	push	{r4, r5, lr}
 8001258:	68dc      	ldr	r4, [r3, #12]
 800125a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	2b04      	cmp	r3, #4
 8001266:	bf28      	it	cs
 8001268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 0501 	mov.w	r5, #1
 8001270:	fa05 f303 	lsl.w	r3, r5, r3
 8001274:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001278:	bf8c      	ite	hi
 800127a:	3c03      	subhi	r4, #3
 800127c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127e:	4019      	ands	r1, r3
 8001280:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001282:	fa05 f404 	lsl.w	r4, r5, r4
 8001286:	3c01      	subs	r4, #1
 8001288:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800128a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	ea42 0201 	orr.w	r2, r2, r1
 8001290:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	bfaf      	iteee	ge
 8001296:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	f000 000f 	andlt.w	r0, r0, #15
 800129e:	4b06      	ldrlt	r3, [pc, #24]	; (80012b8 <HAL_NVIC_SetPriority+0x64>)
 80012a0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	bfa5      	ittet	ge
 80012a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80012a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80012b0:	bd30      	pop	{r4, r5, pc}
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00
 80012b8:	e000ed14 	.word	0xe000ed14

080012bc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80012bc:	0942      	lsrs	r2, r0, #5
 80012be:	2301      	movs	r3, #1
 80012c0:	f000 001f 	and.w	r0, r0, #31
 80012c4:	fa03 f000 	lsl.w	r0, r3, r0
 80012c8:	4b01      	ldr	r3, [pc, #4]	; (80012d0 <HAL_NVIC_EnableIRQ+0x14>)
 80012ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	3801      	subs	r0, #1
 80012d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80012da:	d20a      	bcs.n	80012f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	21f0      	movs	r1, #240	; 0xf0
 80012e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001302:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001304:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001306:	bf0c      	ite	eq
 8001308:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800130c:	f022 0204 	bicne.w	r2, r2, #4
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	4770      	bx	lr
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001318:	4770      	bx	lr

0800131a <HAL_SYSTICK_IRQHandler>:
{
 800131a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800131c:	f7ff fffc 	bl	8001318 <HAL_SYSTICK_Callback>
 8001320:	bd08      	pop	{r3, pc}

08001322 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001322:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001326:	2b02      	cmp	r3, #2
 8001328:	d003      	beq.n	8001332 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800132e:	2001      	movs	r0, #1
 8001330:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001332:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001334:	2305      	movs	r3, #5
 8001336:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800133a:	6813      	ldr	r3, [r2, #0]
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001342:	2000      	movs	r0, #0
}
 8001344:	4770      	bx	lr
	...

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800134c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001350:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001500 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001354:	4a68      	ldr	r2, [pc, #416]	; (80014f8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001504 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800135e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001362:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001364:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001368:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800136c:	45b6      	cmp	lr, r6
 800136e:	f040 80ae 	bne.w	80014ce <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001372:	684c      	ldr	r4, [r1, #4]
 8001374:	f024 0710 	bic.w	r7, r4, #16
 8001378:	2f02      	cmp	r7, #2
 800137a:	d116      	bne.n	80013aa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800137c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001380:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001384:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001388:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001390:	f04f 0c0f 	mov.w	ip, #15
 8001394:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001398:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800139c:	690d      	ldr	r5, [r1, #16]
 800139e:	fa05 f50b 	lsl.w	r5, r5, fp
 80013a2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80013a6:	f8ca 5020 	str.w	r5, [sl, #32]
 80013aa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ae:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80013b0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b4:	fa05 f50a 	lsl.w	r5, r5, sl
 80013b8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ba:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013be:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013cc:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80013ce:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d2:	d811      	bhi.n	80013f8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80013d4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013d6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013da:	68cf      	ldr	r7, [r1, #12]
 80013dc:	fa07 fc0a 	lsl.w	ip, r7, sl
 80013e0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80013e4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80013e6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013ec:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80013f0:	409f      	lsls	r7, r3
 80013f2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80013f6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013f8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013fa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fc:	688f      	ldr	r7, [r1, #8]
 80013fe:	fa07 f70a 	lsl.w	r7, r7, sl
 8001402:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001404:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001406:	00e5      	lsls	r5, r4, #3
 8001408:	d561      	bpl.n	80014ce <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	f04f 0b00 	mov.w	fp, #0
 800140e:	f8cd b00c 	str.w	fp, [sp, #12]
 8001412:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001416:	4d39      	ldr	r5, [pc, #228]	; (80014fc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001418:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800141c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001420:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001424:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001428:	9703      	str	r7, [sp, #12]
 800142a:	9f03      	ldr	r7, [sp, #12]
 800142c:	f023 0703 	bic.w	r7, r3, #3
 8001430:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001434:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001438:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800143c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001440:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001444:	f04f 0e0f 	mov.w	lr, #15
 8001448:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800144e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001452:	d043      	beq.n	80014dc <HAL_GPIO_Init+0x194>
 8001454:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001458:	42a8      	cmp	r0, r5
 800145a:	d041      	beq.n	80014e0 <HAL_GPIO_Init+0x198>
 800145c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001460:	42a8      	cmp	r0, r5
 8001462:	d03f      	beq.n	80014e4 <HAL_GPIO_Init+0x19c>
 8001464:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001468:	42a8      	cmp	r0, r5
 800146a:	d03d      	beq.n	80014e8 <HAL_GPIO_Init+0x1a0>
 800146c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001470:	42a8      	cmp	r0, r5
 8001472:	d03b      	beq.n	80014ec <HAL_GPIO_Init+0x1a4>
 8001474:	4548      	cmp	r0, r9
 8001476:	d03b      	beq.n	80014f0 <HAL_GPIO_Init+0x1a8>
 8001478:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800147c:	42a8      	cmp	r0, r5
 800147e:	d039      	beq.n	80014f4 <HAL_GPIO_Init+0x1ac>
 8001480:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001484:	42a8      	cmp	r0, r5
 8001486:	bf14      	ite	ne
 8001488:	2508      	movne	r5, #8
 800148a:	2507      	moveq	r5, #7
 800148c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001490:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001494:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001496:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001498:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800149a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800149e:	bf0c      	ite	eq
 80014a0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80014a2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80014a4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80014a6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80014ac:	bf0c      	ite	eq
 80014ae:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80014b0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80014b2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014b4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80014ba:	bf0c      	ite	eq
 80014bc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80014be:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80014c0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80014c2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80014c6:	bf54      	ite	pl
 80014c8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80014ca:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80014cc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ce:	3301      	adds	r3, #1
 80014d0:	2b10      	cmp	r3, #16
 80014d2:	f47f af44 	bne.w	800135e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80014d6:	b005      	add	sp, #20
 80014d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014dc:	465d      	mov	r5, fp
 80014de:	e7d5      	b.n	800148c <HAL_GPIO_Init+0x144>
 80014e0:	2501      	movs	r5, #1
 80014e2:	e7d3      	b.n	800148c <HAL_GPIO_Init+0x144>
 80014e4:	2502      	movs	r5, #2
 80014e6:	e7d1      	b.n	800148c <HAL_GPIO_Init+0x144>
 80014e8:	2503      	movs	r5, #3
 80014ea:	e7cf      	b.n	800148c <HAL_GPIO_Init+0x144>
 80014ec:	2504      	movs	r5, #4
 80014ee:	e7cd      	b.n	800148c <HAL_GPIO_Init+0x144>
 80014f0:	2505      	movs	r5, #5
 80014f2:	e7cb      	b.n	800148c <HAL_GPIO_Init+0x144>
 80014f4:	2506      	movs	r5, #6
 80014f6:	e7c9      	b.n	800148c <HAL_GPIO_Init+0x144>
 80014f8:	40013c00 	.word	0x40013c00
 80014fc:	40020000 	.word	0x40020000
 8001500:	40023800 	.word	0x40023800
 8001504:	40021400 	.word	0x40021400

08001508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800150a:	4604      	mov	r4, r0
 800150c:	b910      	cbnz	r0, 8001514 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 800150e:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001510:	b003      	add	sp, #12
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001514:	6803      	ldr	r3, [r0, #0]
 8001516:	07d8      	lsls	r0, r3, #31
 8001518:	d43b      	bmi.n	8001592 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	0799      	lsls	r1, r3, #30
 800151e:	f100 8084 	bmi.w	800162a <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	071e      	lsls	r6, r3, #28
 8001526:	f100 80c6 	bmi.w	80016b6 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	075d      	lsls	r5, r3, #29
 800152e:	d52a      	bpl.n	8001586 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	4baa      	ldr	r3, [pc, #680]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 8001536:	4dab      	ldr	r5, [pc, #684]	; (80017e4 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800153a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800154a:	682b      	ldr	r3, [r5, #0]
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001552:	f7ff fbe1 	bl	8000d18 <HAL_GetTick>
 8001556:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001558:	682b      	ldr	r3, [r5, #0]
 800155a:	05da      	lsls	r2, r3, #23
 800155c:	f140 80cd 	bpl.w	80016fa <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001560:	68a3      	ldr	r3, [r4, #8]
 8001562:	4d9f      	ldr	r5, [pc, #636]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
 8001564:	2b01      	cmp	r3, #1
 8001566:	f040 80cf 	bne.w	8001708 <HAL_RCC_OscConfig+0x200>
 800156a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001572:	f7ff fbd1 	bl	8000d18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001576:	4d9a      	ldr	r5, [pc, #616]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001578:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001580:	079b      	lsls	r3, r3, #30
 8001582:	f140 80e2 	bpl.w	800174a <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001586:	69a2      	ldr	r2, [r4, #24]
 8001588:	2a00      	cmp	r2, #0
 800158a:	f040 80e5 	bne.w	8001758 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 800158e:	2000      	movs	r0, #0
 8001590:	e7be      	b.n	8001510 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001592:	4b93      	ldr	r3, [pc, #588]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	f002 020c 	and.w	r2, r2, #12
 800159a:	2a04      	cmp	r2, #4
 800159c:	d007      	beq.n	80015ae <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a4:	2a08      	cmp	r2, #8
 80015a6:	d10a      	bne.n	80015be <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	025a      	lsls	r2, r3, #9
 80015ac:	d507      	bpl.n	80015be <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ae:	4b8c      	ldr	r3, [pc, #560]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	039b      	lsls	r3, r3, #14
 80015b4:	d5b1      	bpl.n	800151a <HAL_RCC_OscConfig+0x12>
 80015b6:	6863      	ldr	r3, [r4, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1ae      	bne.n	800151a <HAL_RCC_OscConfig+0x12>
 80015bc:	e7a7      	b.n	800150e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015be:	6863      	ldr	r3, [r4, #4]
 80015c0:	4d87      	ldr	r5, [pc, #540]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
 80015c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c6:	d111      	bne.n	80015ec <HAL_RCC_OscConfig+0xe4>
 80015c8:	682b      	ldr	r3, [r5, #0]
 80015ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015d0:	f7ff fba2 	bl	8000d18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d4:	4d82      	ldr	r5, [pc, #520]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80015d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d8:	682b      	ldr	r3, [r5, #0]
 80015da:	039f      	lsls	r7, r3, #14
 80015dc:	d49d      	bmi.n	800151a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015de:	f7ff fb9b 	bl	8000d18 <HAL_GetTick>
 80015e2:	1b80      	subs	r0, r0, r6
 80015e4:	2864      	cmp	r0, #100	; 0x64
 80015e6:	d9f7      	bls.n	80015d8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80015e8:	2003      	movs	r0, #3
 80015ea:	e791      	b.n	8001510 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f0:	d104      	bne.n	80015fc <HAL_RCC_OscConfig+0xf4>
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	602b      	str	r3, [r5, #0]
 80015fa:	e7e5      	b.n	80015c8 <HAL_RCC_OscConfig+0xc0>
 80015fc:	682a      	ldr	r2, [r5, #0]
 80015fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001602:	602a      	str	r2, [r5, #0]
 8001604:	682a      	ldr	r2, [r5, #0]
 8001606:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800160a:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1df      	bne.n	80015d0 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8001610:	f7ff fb82 	bl	8000d18 <HAL_GetTick>
 8001614:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	682b      	ldr	r3, [r5, #0]
 8001618:	0398      	lsls	r0, r3, #14
 800161a:	f57f af7e 	bpl.w	800151a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161e:	f7ff fb7b 	bl	8000d18 <HAL_GetTick>
 8001622:	1b80      	subs	r0, r0, r6
 8001624:	2864      	cmp	r0, #100	; 0x64
 8001626:	d9f6      	bls.n	8001616 <HAL_RCC_OscConfig+0x10e>
 8001628:	e7de      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162a:	4b6d      	ldr	r3, [pc, #436]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	f012 0f0c 	tst.w	r2, #12
 8001632:	d007      	beq.n	8001644 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800163a:	2a08      	cmp	r2, #8
 800163c:	d112      	bne.n	8001664 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	0259      	lsls	r1, r3, #9
 8001642:	d40f      	bmi.n	8001664 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001644:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	0792      	lsls	r2, r2, #30
 800164a:	d503      	bpl.n	8001654 <HAL_RCC_OscConfig+0x14c>
 800164c:	68e2      	ldr	r2, [r4, #12]
 800164e:	2a01      	cmp	r2, #1
 8001650:	f47f af5d 	bne.w	800150e <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	6921      	ldr	r1, [r4, #16]
 8001658:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800165c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001660:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	e75e      	b.n	8001522 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001664:	68e2      	ldr	r2, [r4, #12]
 8001666:	4b60      	ldr	r3, [pc, #384]	; (80017e8 <HAL_RCC_OscConfig+0x2e0>)
 8001668:	b1b2      	cbz	r2, 8001698 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800166e:	f7ff fb53 	bl	8000d18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4d5b      	ldr	r5, [pc, #364]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001674:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001676:	682b      	ldr	r3, [r5, #0]
 8001678:	079b      	lsls	r3, r3, #30
 800167a:	d507      	bpl.n	800168c <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	6922      	ldr	r2, [r4, #16]
 8001680:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001684:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001688:	602b      	str	r3, [r5, #0]
 800168a:	e74a      	b.n	8001522 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff fb44 	bl	8000d18 <HAL_GetTick>
 8001690:	1b80      	subs	r0, r0, r6
 8001692:	2802      	cmp	r0, #2
 8001694:	d9ef      	bls.n	8001676 <HAL_RCC_OscConfig+0x16e>
 8001696:	e7a7      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8001698:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800169a:	f7ff fb3d 	bl	8000d18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	4d50      	ldr	r5, [pc, #320]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80016a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a2:	682b      	ldr	r3, [r5, #0]
 80016a4:	079f      	lsls	r7, r3, #30
 80016a6:	f57f af3c 	bpl.w	8001522 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fb35 	bl	8000d18 <HAL_GetTick>
 80016ae:	1b80      	subs	r0, r0, r6
 80016b0:	2802      	cmp	r0, #2
 80016b2:	d9f6      	bls.n	80016a2 <HAL_RCC_OscConfig+0x19a>
 80016b4:	e798      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b6:	6962      	ldr	r2, [r4, #20]
 80016b8:	4b4c      	ldr	r3, [pc, #304]	; (80017ec <HAL_RCC_OscConfig+0x2e4>)
 80016ba:	b17a      	cbz	r2, 80016dc <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016c0:	f7ff fb2a 	bl	8000d18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c4:	4d46      	ldr	r5, [pc, #280]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80016c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016ca:	0798      	lsls	r0, r3, #30
 80016cc:	f53f af2d 	bmi.w	800152a <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fb22 	bl	8000d18 <HAL_GetTick>
 80016d4:	1b80      	subs	r0, r0, r6
 80016d6:	2802      	cmp	r0, #2
 80016d8:	d9f6      	bls.n	80016c8 <HAL_RCC_OscConfig+0x1c0>
 80016da:	e785      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 80016dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016de:	f7ff fb1b 	bl	8000d18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e2:	4d3f      	ldr	r5, [pc, #252]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80016e4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016e8:	0799      	lsls	r1, r3, #30
 80016ea:	f57f af1e 	bpl.w	800152a <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ee:	f7ff fb13 	bl	8000d18 <HAL_GetTick>
 80016f2:	1b80      	subs	r0, r0, r6
 80016f4:	2802      	cmp	r0, #2
 80016f6:	d9f6      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1de>
 80016f8:	e776      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016fa:	f7ff fb0d 	bl	8000d18 <HAL_GetTick>
 80016fe:	1b80      	subs	r0, r0, r6
 8001700:	2802      	cmp	r0, #2
 8001702:	f67f af29 	bls.w	8001558 <HAL_RCC_OscConfig+0x50>
 8001706:	e76f      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001708:	2b05      	cmp	r3, #5
 800170a:	d104      	bne.n	8001716 <HAL_RCC_OscConfig+0x20e>
 800170c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	672b      	str	r3, [r5, #112]	; 0x70
 8001714:	e729      	b.n	800156a <HAL_RCC_OscConfig+0x62>
 8001716:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001718:	f022 0201 	bic.w	r2, r2, #1
 800171c:	672a      	str	r2, [r5, #112]	; 0x70
 800171e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001720:	f022 0204 	bic.w	r2, r2, #4
 8001724:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001726:	2b00      	cmp	r3, #0
 8001728:	f47f af23 	bne.w	8001572 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 800172c:	f7ff faf4 	bl	8000d18 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001734:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001736:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001738:	0798      	lsls	r0, r3, #30
 800173a:	f57f af24 	bpl.w	8001586 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff faeb 	bl	8000d18 <HAL_GetTick>
 8001742:	1b80      	subs	r0, r0, r6
 8001744:	42b8      	cmp	r0, r7
 8001746:	d9f6      	bls.n	8001736 <HAL_RCC_OscConfig+0x22e>
 8001748:	e74e      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fae5 	bl	8000d18 <HAL_GetTick>
 800174e:	1b80      	subs	r0, r0, r6
 8001750:	42b8      	cmp	r0, r7
 8001752:	f67f af14 	bls.w	800157e <HAL_RCC_OscConfig+0x76>
 8001756:	e747      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001758:	4d21      	ldr	r5, [pc, #132]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
 800175a:	68ab      	ldr	r3, [r5, #8]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	f43f aed4 	beq.w	800150e <HAL_RCC_OscConfig+0x6>
 8001766:	4e22      	ldr	r6, [pc, #136]	; (80017f0 <HAL_RCC_OscConfig+0x2e8>)
 8001768:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800176c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176e:	d12a      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8001770:	f7ff fad2 	bl	8000d18 <HAL_GetTick>
 8001774:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	682b      	ldr	r3, [r5, #0]
 8001778:	0199      	lsls	r1, r3, #6
 800177a:	d41e      	bmi.n	80017ba <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800177c:	6a22      	ldr	r2, [r4, #32]
 800177e:	69e3      	ldr	r3, [r4, #28]
 8001780:	4313      	orrs	r3, r2
 8001782:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001784:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001788:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800178a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800178e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001790:	4c13      	ldr	r4, [pc, #76]	; (80017e0 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001792:	0852      	lsrs	r2, r2, #1
 8001794:	3a01      	subs	r2, #1
 8001796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800179a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800179c:	2301      	movs	r3, #1
 800179e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80017a0:	f7ff faba 	bl	8000d18 <HAL_GetTick>
 80017a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	019a      	lsls	r2, r3, #6
 80017aa:	f53f aef0 	bmi.w	800158e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff fab3 	bl	8000d18 <HAL_GetTick>
 80017b2:	1b40      	subs	r0, r0, r5
 80017b4:	2802      	cmp	r0, #2
 80017b6:	d9f6      	bls.n	80017a6 <HAL_RCC_OscConfig+0x29e>
 80017b8:	e716      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff faad 	bl	8000d18 <HAL_GetTick>
 80017be:	1bc0      	subs	r0, r0, r7
 80017c0:	2802      	cmp	r0, #2
 80017c2:	d9d8      	bls.n	8001776 <HAL_RCC_OscConfig+0x26e>
 80017c4:	e710      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 80017c6:	f7ff faa7 	bl	8000d18 <HAL_GetTick>
 80017ca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017cc:	682b      	ldr	r3, [r5, #0]
 80017ce:	019b      	lsls	r3, r3, #6
 80017d0:	f57f aedd 	bpl.w	800158e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d4:	f7ff faa0 	bl	8000d18 <HAL_GetTick>
 80017d8:	1b00      	subs	r0, r0, r4
 80017da:	2802      	cmp	r0, #2
 80017dc:	d9f6      	bls.n	80017cc <HAL_RCC_OscConfig+0x2c4>
 80017de:	e703      	b.n	80015e8 <HAL_RCC_OscConfig+0xe0>
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40007000 	.word	0x40007000
 80017e8:	42470000 	.word	0x42470000
 80017ec:	42470e80 	.word	0x42470e80
 80017f0:	42470060 	.word	0x42470060

080017f4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f4:	4913      	ldr	r1, [pc, #76]	; (8001844 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80017f6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f8:	688b      	ldr	r3, [r1, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d003      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x16>
 8001802:	2b08      	cmp	r3, #8
 8001804:	d003      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001806:	4810      	ldr	r0, [pc, #64]	; (8001848 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001808:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800180a:	4810      	ldr	r0, [pc, #64]	; (800184c <HAL_RCC_GetSysClockFreq+0x58>)
 800180c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800180e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001810:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001812:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001814:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001818:	bf14      	ite	ne
 800181a:	480c      	ldrne	r0, [pc, #48]	; (800184c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181c:	480a      	ldreq	r0, [pc, #40]	; (8001848 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001822:	bf18      	it	ne
 8001824:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001826:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182a:	fba1 0100 	umull	r0, r1, r1, r0
 800182e:	f7ff f8b5 	bl	800099c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <HAL_RCC_GetSysClockFreq+0x50>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800183a:	3301      	adds	r3, #1
 800183c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800183e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001842:	bd08      	pop	{r3, pc}
 8001844:	40023800 	.word	0x40023800
 8001848:	00f42400 	.word	0x00f42400
 800184c:	007a1200 	.word	0x007a1200

08001850 <HAL_RCC_ClockConfig>:
{
 8001850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001854:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001856:	4604      	mov	r4, r0
 8001858:	b910      	cbnz	r0, 8001860 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800185a:	2001      	movs	r0, #1
 800185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b44      	ldr	r3, [pc, #272]	; (8001974 <HAL_RCC_ClockConfig+0x124>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	f002 020f 	and.w	r2, r2, #15
 8001868:	428a      	cmp	r2, r1
 800186a:	d328      	bcc.n	80018be <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186c:	6821      	ldr	r1, [r4, #0]
 800186e:	078f      	lsls	r7, r1, #30
 8001870:	d42d      	bmi.n	80018ce <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	07c8      	lsls	r0, r1, #31
 8001874:	d440      	bmi.n	80018f8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_ClockConfig+0x124>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	f002 020f 	and.w	r2, r2, #15
 800187e:	4295      	cmp	r5, r2
 8001880:	d366      	bcc.n	8001950 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001882:	6822      	ldr	r2, [r4, #0]
 8001884:	0751      	lsls	r1, r2, #29
 8001886:	d46c      	bmi.n	8001962 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	0713      	lsls	r3, r2, #28
 800188a:	d507      	bpl.n	800189c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188c:	4a3a      	ldr	r2, [pc, #232]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
 800188e:	6921      	ldr	r1, [r4, #16]
 8001890:	6893      	ldr	r3, [r2, #8]
 8001892:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001896:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800189a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800189c:	f7ff ffaa 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80018a0:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
 80018a2:	4a36      	ldr	r2, [pc, #216]	; (800197c <HAL_RCC_ClockConfig+0x12c>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	40d8      	lsrs	r0, r3
 80018ae:	4b34      	ldr	r3, [pc, #208]	; (8001980 <HAL_RCC_ClockConfig+0x130>)
 80018b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff f9fa 	bl	8000cac <HAL_InitTick>
  return HAL_OK;
 80018b8:	2000      	movs	r0, #0
 80018ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	b2ca      	uxtb	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	4299      	cmp	r1, r3
 80018ca:	d1c6      	bne.n	800185a <HAL_RCC_ClockConfig+0xa>
 80018cc:	e7ce      	b.n	800186c <HAL_RCC_ClockConfig+0x1c>
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d4:	bf1e      	ittt	ne
 80018d6:	689a      	ldrne	r2, [r3, #8]
 80018d8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80018dc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e0:	bf42      	ittt	mi
 80018e2:	689a      	ldrmi	r2, [r3, #8]
 80018e4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80018e8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	68a0      	ldr	r0, [r4, #8]
 80018ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018f2:	4302      	orrs	r2, r0
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	e7bc      	b.n	8001872 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f8:	6862      	ldr	r2, [r4, #4]
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
 80018fc:	2a01      	cmp	r2, #1
 80018fe:	d11d      	bne.n	800193c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001906:	d0a8      	beq.n	800185a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001908:	4e1b      	ldr	r6, [pc, #108]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
 800190a:	68b3      	ldr	r3, [r6, #8]
 800190c:	f023 0303 	bic.w	r3, r3, #3
 8001910:	4313      	orrs	r3, r2
 8001912:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001914:	f7ff fa00 	bl	8000d18 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001918:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800191c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	68b3      	ldr	r3, [r6, #8]
 8001920:	6862      	ldr	r2, [r4, #4]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800192a:	d0a4      	beq.n	8001876 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192c:	f7ff f9f4 	bl	8000d18 <HAL_GetTick>
 8001930:	1bc0      	subs	r0, r0, r7
 8001932:	4540      	cmp	r0, r8
 8001934:	d9f3      	bls.n	800191e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001936:	2003      	movs	r0, #3
}
 8001938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193c:	1e91      	subs	r1, r2, #2
 800193e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001940:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	d802      	bhi.n	800194a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001944:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001948:	e7dd      	b.n	8001906 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	f013 0f02 	tst.w	r3, #2
 800194e:	e7da      	b.n	8001906 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001950:	b2ea      	uxtb	r2, r5
 8001952:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	429d      	cmp	r5, r3
 800195c:	f47f af7d 	bne.w	800185a <HAL_RCC_ClockConfig+0xa>
 8001960:	e78f      	b.n	8001882 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001962:	4905      	ldr	r1, [pc, #20]	; (8001978 <HAL_RCC_ClockConfig+0x128>)
 8001964:	68e0      	ldr	r0, [r4, #12]
 8001966:	688b      	ldr	r3, [r1, #8]
 8001968:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800196c:	4303      	orrs	r3, r0
 800196e:	608b      	str	r3, [r1, #8]
 8001970:	e78a      	b.n	8001888 <HAL_RCC_ClockConfig+0x38>
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00
 8001978:	40023800 	.word	0x40023800
 800197c:	08002308 	.word	0x08002308
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001984:	4b01      	ldr	r3, [pc, #4]	; (800198c <HAL_RCC_GetHCLKFreq+0x8>)
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000

08001990 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800199a:	5cd3      	ldrb	r3, [r2, r3]
 800199c:	4a03      	ldr	r2, [pc, #12]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 800199e:	6810      	ldr	r0, [r2, #0]
}
 80019a0:	40d8      	lsrs	r0, r3
 80019a2:	4770      	bx	lr
 80019a4:	40023800 	.word	0x40023800
 80019a8:	08002318 	.word	0x08002318
 80019ac:	20000000 	.word	0x20000000

080019b0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	4a03      	ldr	r2, [pc, #12]	; (80019cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80019be:	6810      	ldr	r0, [r2, #0]
}
 80019c0:	40d8      	lsrs	r0, r3
 80019c2:	4770      	bx	lr
 80019c4:	40023800 	.word	0x40023800
 80019c8:	08002318 	.word	0x08002318
 80019cc:	20000000 	.word	0x20000000

080019d0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019d0:	6803      	ldr	r3, [r0, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80019d8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019e2:	2320      	movs	r3, #32
 80019e4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80019e8:	4770      	bx	lr
	...

080019ec <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80019f0:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80019f2:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80019f4:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019f6:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80019f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80019fc:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80019fe:	6133      	str	r3, [r6, #16]
{
 8001a00:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a02:	6883      	ldr	r3, [r0, #8]
 8001a04:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001a06:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a08:	4303      	orrs	r3, r0
 8001a0a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001a0c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a10:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001a12:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a16:	430b      	orrs	r3, r1
 8001a18:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001a1a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001a1c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001a1e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001a24:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a26:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001a2a:	6173      	str	r3, [r6, #20]
 8001a2c:	4b7a      	ldr	r3, [pc, #488]	; (8001c18 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a2e:	d17c      	bne.n	8001b2a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a30:	429e      	cmp	r6, r3
 8001a32:	d003      	beq.n	8001a3c <UART_SetConfig+0x50>
 8001a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a38:	429e      	cmp	r6, r3
 8001a3a:	d144      	bne.n	8001ac6 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001a3c:	f7ff ffb8 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8001a40:	2519      	movs	r5, #25
 8001a42:	fb05 f300 	mul.w	r3, r5, r0
 8001a46:	6860      	ldr	r0, [r4, #4]
 8001a48:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a4c:	0040      	lsls	r0, r0, #1
 8001a4e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a52:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001a5a:	f7ff ffa9 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8001a5e:	6863      	ldr	r3, [r4, #4]
 8001a60:	4368      	muls	r0, r5
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fbb0 f7f3 	udiv	r7, r0, r3
 8001a68:	f7ff ffa2 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8001a6c:	6863      	ldr	r3, [r4, #4]
 8001a6e:	4368      	muls	r0, r5
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a76:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a7a:	fb09 7313 	mls	r3, r9, r3, r7
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	3332      	adds	r3, #50	; 0x32
 8001a82:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001a8c:	f7ff ff90 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8001a90:	6862      	ldr	r2, [r4, #4]
 8001a92:	4368      	muls	r0, r5
 8001a94:	0052      	lsls	r2, r2, #1
 8001a96:	fbb0 faf2 	udiv	sl, r0, r2
 8001a9a:	f7ff ff89 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a9e:	6863      	ldr	r3, [r4, #4]
 8001aa0:	4368      	muls	r0, r5
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001aac:	fb09 a313 	mls	r3, r9, r3, sl
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	3332      	adds	r3, #50	; 0x32
 8001ab4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001abe:	443b      	add	r3, r7
 8001ac0:	60b3      	str	r3, [r6, #8]
 8001ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ac6:	f7ff ff63 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8001aca:	2519      	movs	r5, #25
 8001acc:	fb05 f300 	mul.w	r3, r5, r0
 8001ad0:	6860      	ldr	r0, [r4, #4]
 8001ad2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ad6:	0040      	lsls	r0, r0, #1
 8001ad8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001adc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ae0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ae4:	f7ff ff54 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8001ae8:	6863      	ldr	r3, [r4, #4]
 8001aea:	4368      	muls	r0, r5
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fbb0 f7f3 	udiv	r7, r0, r3
 8001af2:	f7ff ff4d 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8001af6:	6863      	ldr	r3, [r4, #4]
 8001af8:	4368      	muls	r0, r5
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b00:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b04:	fb09 7313 	mls	r3, r9, r3, r7
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	3332      	adds	r3, #50	; 0x32
 8001b0c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001b16:	f7ff ff3b 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8001b1a:	6862      	ldr	r2, [r4, #4]
 8001b1c:	4368      	muls	r0, r5
 8001b1e:	0052      	lsls	r2, r2, #1
 8001b20:	fbb0 faf2 	udiv	sl, r0, r2
 8001b24:	f7ff ff34 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8001b28:	e7b9      	b.n	8001a9e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b2a:	429e      	cmp	r6, r3
 8001b2c:	d002      	beq.n	8001b34 <UART_SetConfig+0x148>
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <UART_SetConfig+0x230>)
 8001b30:	429e      	cmp	r6, r3
 8001b32:	d140      	bne.n	8001bb6 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b34:	f7ff ff3c 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8001b38:	6867      	ldr	r7, [r4, #4]
 8001b3a:	2519      	movs	r5, #25
 8001b3c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b40:	fb05 f300 	mul.w	r3, r5, r0
 8001b44:	00bf      	lsls	r7, r7, #2
 8001b46:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b4a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b4e:	011f      	lsls	r7, r3, #4
 8001b50:	f7ff ff2e 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8001b54:	6863      	ldr	r3, [r4, #4]
 8001b56:	4368      	muls	r0, r5
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	fbb0 f8f3 	udiv	r8, r0, r3
 8001b5e:	f7ff ff27 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8001b62:	6863      	ldr	r3, [r4, #4]
 8001b64:	4368      	muls	r0, r5
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b6c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b70:	fb09 8313 	mls	r3, r9, r3, r8
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	3332      	adds	r3, #50	; 0x32
 8001b78:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b7c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001b80:	f7ff ff16 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8001b84:	6862      	ldr	r2, [r4, #4]
 8001b86:	4368      	muls	r0, r5
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	fbb0 faf2 	udiv	sl, r0, r2
 8001b8e:	f7ff ff0f 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b92:	6863      	ldr	r3, [r4, #4]
 8001b94:	4368      	muls	r0, r5
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ba0:	fb09 a313 	mls	r3, r9, r3, sl
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	3332      	adds	r3, #50	; 0x32
 8001ba8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	ea43 0308 	orr.w	r3, r3, r8
 8001bb4:	e783      	b.n	8001abe <UART_SetConfig+0xd2>
 8001bb6:	f7ff feeb 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8001bba:	6867      	ldr	r7, [r4, #4]
 8001bbc:	2519      	movs	r5, #25
 8001bbe:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001bc2:	fb05 f300 	mul.w	r3, r5, r0
 8001bc6:	00bf      	lsls	r7, r7, #2
 8001bc8:	fbb3 f3f7 	udiv	r3, r3, r7
 8001bcc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bd0:	011f      	lsls	r7, r3, #4
 8001bd2:	f7ff fedd 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8001bd6:	6863      	ldr	r3, [r4, #4]
 8001bd8:	4368      	muls	r0, r5
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	fbb0 f8f3 	udiv	r8, r0, r3
 8001be0:	f7ff fed6 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8001be4:	6863      	ldr	r3, [r4, #4]
 8001be6:	4368      	muls	r0, r5
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bee:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bf2:	fb09 8313 	mls	r3, r9, r3, r8
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	3332      	adds	r3, #50	; 0x32
 8001bfa:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bfe:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001c02:	f7ff fec5 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8001c06:	6862      	ldr	r2, [r4, #4]
 8001c08:	4368      	muls	r0, r5
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	fbb0 faf2 	udiv	sl, r0, r2
 8001c10:	f7ff febe 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8001c14:	e7bd      	b.n	8001b92 <UART_SetConfig+0x1a6>
 8001c16:	bf00      	nop
 8001c18:	40011000 	.word	0x40011000
 8001c1c:	40011400 	.word	0x40011400

08001c20 <HAL_UART_Init>:
{
 8001c20:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001c22:	4604      	mov	r4, r0
 8001c24:	b340      	cbz	r0, 8001c78 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c26:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c2e:	b91b      	cbnz	r3, 8001c38 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001c30:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001c34:	f000 fa9c 	bl	8002170 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001c38:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c3a:	2324      	movs	r3, #36	; 0x24
 8001c3c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001c40:	68d3      	ldr	r3, [r2, #12]
 8001c42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c46:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f7ff fecf 	bl	80019ec <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c5e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c66:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c68:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001c6a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001c6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001c72:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001c76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c78:	2001      	movs	r0, #1
}
 8001c7a:	bd10      	pop	{r4, pc}

08001c7c <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8001c7c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d118      	bne.n	8001cb6 <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL ) || (Size == 0)) 
 8001c84:	b1a9      	cbz	r1, 8001cb2 <HAL_UART_Transmit_IT+0x36>
 8001c86:	b1a2      	cbz	r2, 8001cb2 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8001c88:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d012      	beq.n	8001cb6 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8001c90:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 8001c92:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001c94:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c96:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001c98:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c9a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c9c:	2221      	movs	r2, #33	; 0x21
 8001c9e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001ca2:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8001ca4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001ca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cac:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001cae:	4618      	mov	r0, r3
 8001cb0:	4770      	bx	lr
      return HAL_ERROR;
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	4770      	bx	lr
    return HAL_BUSY;   
 8001cb6:	2002      	movs	r0, #2
}
 8001cb8:	4770      	bx	lr

08001cba <HAL_UART_RxCpltCallback>:
 8001cba:	4770      	bx	lr

08001cbc <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001cbc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001cc0:	2b22      	cmp	r3, #34	; 0x22
{
 8001cc2:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001cc4:	d132      	bne.n	8001d2c <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cc6:	6883      	ldr	r3, [r0, #8]
 8001cc8:	6901      	ldr	r1, [r0, #16]
 8001cca:	6802      	ldr	r2, [r0, #0]
 8001ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001cd2:	d11f      	bne.n	8001d14 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001cd4:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001cd6:	b9c9      	cbnz	r1, 8001d0c <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cdc:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001ce0:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001ce2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001ce4:	3c01      	subs	r4, #1
 8001ce6:	b2a4      	uxth	r4, r4
 8001ce8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001cea:	b96c      	cbnz	r4, 8001d08 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cec:	6803      	ldr	r3, [r0, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001cf4:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	f022 0201 	bic.w	r2, r2, #1
 8001cfc:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001d04:	f7ff ffd9 	bl	8001cba <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001d08:	2000      	movs	r0, #0
}
 8001d0a:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	f823 2b01 	strh.w	r2, [r3], #1
 8001d12:	e7e5      	b.n	8001ce0 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001d14:	b921      	cbnz	r1, 8001d20 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d16:	1c59      	adds	r1, r3, #1
 8001d18:	6852      	ldr	r2, [r2, #4]
 8001d1a:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d1c:	701a      	strb	r2, [r3, #0]
 8001d1e:	e7e0      	b.n	8001ce2 <UART_Receive_IT+0x26>
 8001d20:	6852      	ldr	r2, [r2, #4]
 8001d22:	1c59      	adds	r1, r3, #1
 8001d24:	6281      	str	r1, [r0, #40]	; 0x28
 8001d26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d2a:	e7f7      	b.n	8001d1c <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	bd10      	pop	{r4, pc}

08001d30 <HAL_UART_ErrorCallback>:
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d34:	6803      	ldr	r3, [r0, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d38:	68d9      	ldr	r1, [r3, #12]
{
 8001d3a:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8001d3c:	0716      	lsls	r6, r2, #28
{
 8001d3e:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d40:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001d42:	d107      	bne.n	8001d54 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d44:	0696      	lsls	r6, r2, #26
 8001d46:	d55a      	bpl.n	8001dfe <HAL_UART_IRQHandler+0xca>
 8001d48:	068d      	lsls	r5, r1, #26
 8001d4a:	d558      	bpl.n	8001dfe <HAL_UART_IRQHandler+0xca>
}
 8001d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001d50:	f7ff bfb4 	b.w	8001cbc <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d54:	f015 0501 	ands.w	r5, r5, #1
 8001d58:	d102      	bne.n	8001d60 <HAL_UART_IRQHandler+0x2c>
 8001d5a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001d5e:	d04e      	beq.n	8001dfe <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d60:	07d3      	lsls	r3, r2, #31
 8001d62:	d505      	bpl.n	8001d70 <HAL_UART_IRQHandler+0x3c>
 8001d64:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d66:	bf42      	ittt	mi
 8001d68:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001d6a:	f043 0301 	orrmi.w	r3, r3, #1
 8001d6e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d70:	0750      	lsls	r0, r2, #29
 8001d72:	d504      	bpl.n	8001d7e <HAL_UART_IRQHandler+0x4a>
 8001d74:	b11d      	cbz	r5, 8001d7e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d7e:	0793      	lsls	r3, r2, #30
 8001d80:	d504      	bpl.n	8001d8c <HAL_UART_IRQHandler+0x58>
 8001d82:	b11d      	cbz	r5, 8001d8c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d8c:	0716      	lsls	r6, r2, #28
 8001d8e:	d504      	bpl.n	8001d9a <HAL_UART_IRQHandler+0x66>
 8001d90:	b11d      	cbz	r5, 8001d9a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d066      	beq.n	8001e6e <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001da0:	0695      	lsls	r5, r2, #26
 8001da2:	d504      	bpl.n	8001dae <HAL_UART_IRQHandler+0x7a>
 8001da4:	0688      	lsls	r0, r1, #26
 8001da6:	d502      	bpl.n	8001dae <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff ff87 	bl	8001cbc <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001db2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001db4:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001db6:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001db8:	d402      	bmi.n	8001dc0 <HAL_UART_IRQHandler+0x8c>
 8001dba:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001dbe:	d01a      	beq.n	8001df6 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001dc0:	f7ff fe06 	bl	80019d0 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	0652      	lsls	r2, r2, #25
 8001dca:	d510      	bpl.n	8001dee <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dcc:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001dce:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dd4:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001dd6:	b150      	cbz	r0, 8001dee <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_UART_IRQHandler+0x13c>)
 8001dda:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ddc:	f7ff faa1 	bl	8001322 <HAL_DMA_Abort_IT>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d044      	beq.n	8001e6e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001de4:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001dec:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001dee:	4620      	mov	r0, r4
 8001df0:	f7ff ff9e 	bl	8001d30 <HAL_UART_ErrorCallback>
 8001df4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001df6:	f7ff ff9b 	bl	8001d30 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dfa:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001dfe:	0616      	lsls	r6, r2, #24
 8001e00:	d527      	bpl.n	8001e52 <HAL_UART_IRQHandler+0x11e>
 8001e02:	060d      	lsls	r5, r1, #24
 8001e04:	d525      	bpl.n	8001e52 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e06:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001e0a:	2a21      	cmp	r2, #33	; 0x21
 8001e0c:	d12f      	bne.n	8001e6e <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e0e:	68a2      	ldr	r2, [r4, #8]
 8001e10:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001e14:	6a22      	ldr	r2, [r4, #32]
 8001e16:	d117      	bne.n	8001e48 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e18:	8811      	ldrh	r1, [r2, #0]
 8001e1a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001e1e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001e20:	6921      	ldr	r1, [r4, #16]
 8001e22:	b979      	cbnz	r1, 8001e44 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001e24:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001e26:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001e28:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001e2a:	3a01      	subs	r2, #1
 8001e2c:	b292      	uxth	r2, r2
 8001e2e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001e30:	b9ea      	cbnz	r2, 8001e6e <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e38:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001e44:	3201      	adds	r2, #1
 8001e46:	e7ee      	b.n	8001e26 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e48:	1c51      	adds	r1, r2, #1
 8001e4a:	6221      	str	r1, [r4, #32]
 8001e4c:	7812      	ldrb	r2, [r2, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	e7ea      	b.n	8001e28 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e52:	0650      	lsls	r0, r2, #25
 8001e54:	d50b      	bpl.n	8001e6e <HAL_UART_IRQHandler+0x13a>
 8001e56:	064a      	lsls	r2, r1, #25
 8001e58:	d509      	bpl.n	8001e6e <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e60:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e62:	2320      	movs	r3, #32
 8001e64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f000 f837 	bl	8001edc <HAL_UART_TxCpltCallback>
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}
 8001e70:	08001e75 	.word	0x08001e75

08001e74 <UART_DMAAbortOnError>:
{
 8001e74:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e76:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001e7c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001e7e:	f7ff ff57 	bl	8001d30 <HAL_UART_ErrorCallback>
 8001e82:	bd08      	pop	{r3, pc}

08001e84 <GetNumtoString>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void GetNumtoString(uint32_t v_counter_u32)
{
 8001e84:	b530      	push	{r4, r5, lr}
	a_buf_u8[3] = 48 + ((v_counter_u32 / 1) - ((v_counter_u32 / 10) * 10));
 8001e86:	240a      	movs	r4, #10
 8001e88:	4913      	ldr	r1, [pc, #76]	; (8001ed8 <GetNumtoString+0x54>)
 8001e8a:	fbb0 f3f4 	udiv	r3, r0, r4
 8001e8e:	fb04 0213 	mls	r2, r4, r3, r0
 8001e92:	3230      	adds	r2, #48	; 0x30
 8001e94:	70ca      	strb	r2, [r1, #3]
	a_buf_u8[2] = 48 + ((v_counter_u32 / 10) - ((v_counter_u32 / 100) * 10));
 8001e96:	2264      	movs	r2, #100	; 0x64
 8001e98:	fbb0 f2f2 	udiv	r2, r0, r2
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8001ea2:	3330      	adds	r3, #48	; 0x30
 8001ea4:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
 8001ea8:	708b      	strb	r3, [r1, #2]
	a_buf_u8[1] = 48 + ((v_counter_u32 / 100) - ((v_counter_u32 / 1000) * 10));
 8001eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8001eb8:	3230      	adds	r2, #48	; 0x30
 8001eba:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
 8001ebe:	704a      	strb	r2, [r1, #1]
	a_buf_u8[0] = 48 + ((v_counter_u32 / 1000) - ((v_counter_u32 / 10000) * 10));
 8001ec0:	3330      	adds	r3, #48	; 0x30
 8001ec2:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ec6:	fbb0 f0f2 	udiv	r0, r0, r2
 8001eca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ece:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8001ed2:	700b      	strb	r3, [r1, #0]
	a_buf_u8[4] = 10;
 8001ed4:	710c      	strb	r4, [r1, #4]
 8001ed6:	bd30      	pop	{r4, r5, pc}
 8001ed8:	20000074 	.word	0x20000074

08001edc <HAL_UART_TxCpltCallback>:

}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001edc:	4770      	bx	lr
	...

08001ee0 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001ee0:	b530      	push	{r4, r5, lr}
 8001ee2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <SystemClock_Config+0xa4>)
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	9101      	str	r1, [sp, #4]
 8001eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001efc:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <SystemClock_Config+0xa8>)
 8001efe:	9102      	str	r1, [sp, #8]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f12:	2301      	movs	r3, #1
 8001f14:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f1a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f20:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f22:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f24:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f26:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f28:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f2a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f2c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f2e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f30:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f32:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f34:	f7ff fae8 	bl	8001508 <HAL_RCC_OscConfig>
 8001f38:	b100      	cbz	r0, 8001f3c <SystemClock_Config+0x5c>
 8001f3a:	e7fe      	b.n	8001f3a <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f44:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f46:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f48:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f4e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f50:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f52:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f54:	f7ff fc7c 	bl	8001850 <HAL_RCC_ClockConfig>
 8001f58:	4605      	mov	r5, r0
 8001f5a:	b100      	cbz	r0, 8001f5e <SystemClock_Config+0x7e>
 8001f5c:	e7fe      	b.n	8001f5c <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001f5e:	f7ff fd11 	bl	8001984 <HAL_RCC_GetHCLKFreq>
 8001f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f66:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f6a:	f7ff f9b3 	bl	80012d4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f7ff f9c6 	bl	8001300 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f74:	462a      	mov	r2, r5
 8001f76:	4629      	mov	r1, r5
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f7ff f96a 	bl	8001254 <HAL_NVIC_SetPriority>
}
 8001f80:	b015      	add	sp, #84	; 0x54
 8001f82:	bd30      	pop	{r4, r5, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40007000 	.word	0x40007000
 8001f8c:	00000000 	.word	0x00000000

08001f90 <main>:
{
 8001f90:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  HAL_Init();
 8001f92:	f7fe fe9f 	bl	8000cd4 <HAL_Init>
  SystemClock_Config();
 8001f96:	f7ff ffa3 	bl	8001ee0 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	4a3c      	ldr	r2, [pc, #240]	; (8002090 <main+0x100>)
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hadc1.Instance = ADC1;
 8001fa2:	4c3c      	ldr	r4, [pc, #240]	; (8002094 <main+0x104>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fa4:	483c      	ldr	r0, [pc, #240]	; (8002098 <main+0x108>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fa6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001faa:	6311      	str	r1, [r2, #48]	; 0x30
 8001fac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001fae:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001fb2:	9100      	str	r1, [sp, #0]
 8001fb4:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001fba:	f041 0101 	orr.w	r1, r1, #1
 8001fbe:	6311      	str	r1, [r2, #48]	; 0x30
 8001fc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fc2:	60a3      	str	r3, [r4, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	f002 0201 	and.w	r2, r2, #1
 8001fc8:	9201      	str	r2, [sp, #4]
 8001fca:	9a01      	ldr	r2, [sp, #4]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fcc:	6123      	str	r3, [r4, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fd2:	e884 0005 	stmia.w	r4, {r0, r2}
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fd6:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fd8:	4a30      	ldr	r2, [pc, #192]	; (800209c <main+0x10c>)
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fda:	61a5      	str	r5, [r4, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fdc:	4620      	mov	r0, r4
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fde:	6223      	str	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fe2:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fe4:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fe6:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fe8:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001fea:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fec:	f7fe fe9a 	bl	8000d24 <HAL_ADC_Init>
 8001ff0:	b100      	cbz	r0, 8001ff4 <main+0x64>
 8001ff2:	e7fe      	b.n	8001ff2 <main+0x62>
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001ff4:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff6:	a902      	add	r1, sp, #8
 8001ff8:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8001ffa:	9502      	str	r5, [sp, #8]
  sConfig.Rank = 1;
 8001ffc:	9503      	str	r5, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001ffe:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002000:	f7ff f87e 	bl	8001100 <HAL_ADC_ConfigChannel>
 8002004:	b100      	cbz	r0, 8002008 <main+0x78>
 8002006:	e7fe      	b.n	8002006 <main+0x76>
  huart2.Instance = USART2;
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <main+0x110>)
  huart2.Init.BaudRate = 9600;
 800200a:	4926      	ldr	r1, [pc, #152]	; (80020a4 <main+0x114>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800200c:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 9600;
 800200e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002012:	e883 0006 	stmia.w	r3, {r1, r2}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002016:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002018:	6118      	str	r0, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800201a:	220c      	movs	r2, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201c:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800201e:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002020:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002022:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002024:	f7ff fdfc 	bl	8001c20 <HAL_UART_Init>
 8002028:	b100      	cbz	r0, 800202c <main+0x9c>
 800202a:	e7fe      	b.n	800202a <main+0x9a>
  HAL_ADC_Start(&hadc1);
 800202c:	4620      	mov	r0, r4
 800202e:	f7fe ff1d 	bl	8000e6c <HAL_ADC_Start>
	  v_tempValue_u32 = (3.3 * v_adcValue_u32 * 100) / 4096 ;
 8002032:	f20f 0954 	addw	r9, pc, #84	; 0x54
 8002036:	e9d9 8900 	ldrd	r8, r9, [r9]
 800203a:	4f1b      	ldr	r7, [pc, #108]	; (80020a8 <main+0x118>)
 800203c:	2600      	movs	r6, #0
	  HAL_ADC_PollForConversion(&hadc1,10);
 800203e:	210a      	movs	r1, #10
 8002040:	4620      	mov	r0, r4
 8002042:	f7fe ff73 	bl	8000f2c <HAL_ADC_PollForConversion>
	  v_adcValue_u32 = HAL_ADC_GetValue(&hadc1);
 8002046:	4620      	mov	r0, r4
 8002048:	f7fe ffc0 	bl	8000fcc <HAL_ADC_GetValue>
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <main+0x11c>)
 800204e:	6018      	str	r0, [r3, #0]
	  v_tempValue_u32 = (3.3 * v_adcValue_u32 * 100) / 4096 ;
 8002050:	f7fe f9fc 	bl	800044c <__aeabi_ui2d>
 8002054:	4642      	mov	r2, r8
 8002056:	464b      	mov	r3, r9
 8002058:	f7fe fa6e 	bl	8000538 <__aeabi_dmul>
 800205c:	4632      	mov	r2, r6
 800205e:	463b      	mov	r3, r7
 8002060:	f7fe fa6a 	bl	8000538 <__aeabi_dmul>
 8002064:	2200      	movs	r2, #0
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <main+0x120>)
 8002068:	f7fe fa66 	bl	8000538 <__aeabi_dmul>
 800206c:	f7fe fc76 	bl	800095c <__aeabi_d2uiz>
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <main+0x124>)
 8002072:	6018      	str	r0, [r3, #0]
	  GetNumtoString(v_tempValue_u32);
 8002074:	f7ff ff06 	bl	8001e84 <GetNumtoString>
	  HAL_UART_Transmit_IT(&huart2,(uint8_t *)a_buf_u8,sizeof(a_buf_u8));
 8002078:	2205      	movs	r2, #5
 800207a:	490f      	ldr	r1, [pc, #60]	; (80020b8 <main+0x128>)
 800207c:	4808      	ldr	r0, [pc, #32]	; (80020a0 <main+0x110>)
 800207e:	f7ff fdfd 	bl	8001c7c <HAL_UART_Transmit_IT>
 8002082:	e7dc      	b.n	800203e <main+0xae>
 8002084:	f3af 8000 	nop.w
 8002088:	66666666 	.word	0x66666666
 800208c:	400a6666 	.word	0x400a6666
 8002090:	40023800 	.word	0x40023800
 8002094:	2000002c 	.word	0x2000002c
 8002098:	40012000 	.word	0x40012000
 800209c:	0f000001 	.word	0x0f000001
 80020a0:	2000007c 	.word	0x2000007c
 80020a4:	40004400 	.word	0x40004400
 80020a8:	40590000 	.word	0x40590000
 80020ac:	20000020 	.word	0x20000020
 80020b0:	3f300000 	.word	0x3f300000
 80020b4:	20000024 	.word	0x20000024
 80020b8:	20000074 	.word	0x20000074

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020be:	2003      	movs	r0, #3
 80020c0:	f7ff f8b6 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	4611      	mov	r1, r2
 80020c8:	f06f 000b 	mvn.w	r0, #11
 80020cc:	f7ff f8c2 	bl	8001254 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	4611      	mov	r1, r2
 80020d4:	f06f 000a 	mvn.w	r0, #10
 80020d8:	f7ff f8bc 	bl	8001254 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	4611      	mov	r1, r2
 80020e0:	f06f 0009 	mvn.w	r0, #9
 80020e4:	f7ff f8b6 	bl	8001254 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	4611      	mov	r1, r2
 80020ec:	f06f 0004 	mvn.w	r0, #4
 80020f0:	f7ff f8b0 	bl	8001254 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	4611      	mov	r1, r2
 80020f8:	f06f 0003 	mvn.w	r0, #3
 80020fc:	f7ff f8aa 	bl	8001254 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002100:	2200      	movs	r2, #0
 8002102:	4611      	mov	r1, r2
 8002104:	f06f 0001 	mvn.w	r0, #1
 8002108:	f7ff f8a4 	bl	8001254 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	4611      	mov	r1, r2
 8002110:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002118:	f7ff b89c 	b.w	8001254 <HAL_NVIC_SetPriority>

0800211c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800211c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800211e:	6802      	ldr	r2, [r0, #0]
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_ADC_MspInit+0x4c>)
 8002122:	429a      	cmp	r2, r3
{
 8002124:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8002126:	d11d      	bne.n	8002164 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002128:	2400      	movs	r4, #0
 800212a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800212e:	9400      	str	r4, [sp, #0]
 8002130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	480e      	ldr	r0, [pc, #56]	; (800216c <HAL_ADC_MspInit+0x50>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002146:	2302      	movs	r3, #2
 8002148:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800214c:	2303      	movs	r3, #3
 800214e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f7ff f8fa 	bl	8001348 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002154:	2012      	movs	r0, #18
 8002156:	4622      	mov	r2, r4
 8002158:	4621      	mov	r1, r4
 800215a:	f7ff f87b 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800215e:	2012      	movs	r0, #18
 8002160:	f7ff f8ac 	bl	80012bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002164:	b006      	add	sp, #24
 8002166:	bd10      	pop	{r4, pc}
 8002168:	40012000 	.word	0x40012000
 800216c:	40020000 	.word	0x40020000

08002170 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002170:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002172:	6802      	ldr	r2, [r0, #0]
 8002174:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <HAL_UART_MspInit+0x58>)
 8002176:	429a      	cmp	r2, r3
{
 8002178:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 800217a:	d122      	bne.n	80021c2 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800217c:	2400      	movs	r4, #0
 800217e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002182:	9400      	str	r4, [sp, #0]
 8002184:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	4811      	ldr	r0, [pc, #68]	; (80021cc <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002188:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800218c:	6419      	str	r1, [r3, #64]	; 0x40
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002198:	230c      	movs	r3, #12
 800219a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a0:	2301      	movs	r3, #1
 80021a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021aa:	2307      	movs	r3, #7
 80021ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f7ff f8cb 	bl	8001348 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021b2:	2026      	movs	r0, #38	; 0x26
 80021b4:	4622      	mov	r2, r4
 80021b6:	4621      	mov	r1, r4
 80021b8:	f7ff f84c 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021bc:	2026      	movs	r0, #38	; 0x26
 80021be:	f7ff f87d 	bl	80012bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021c2:	b006      	add	sp, #24
 80021c4:	bd10      	pop	{r4, pc}
 80021c6:	bf00      	nop
 80021c8:	40004400 	.word	0x40004400
 80021cc:	40020000 	.word	0x40020000

080021d0 <NMI_Handler>:
 80021d0:	4770      	bx	lr

080021d2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler>

080021d4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80021d4:	e7fe      	b.n	80021d4 <MemManage_Handler>

080021d6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80021d6:	e7fe      	b.n	80021d6 <BusFault_Handler>

080021d8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80021d8:	e7fe      	b.n	80021d8 <UsageFault_Handler>

080021da <SVC_Handler>:
 80021da:	4770      	bx	lr

080021dc <DebugMon_Handler>:
 80021dc:	4770      	bx	lr

080021de <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80021de:	4770      	bx	lr

080021e0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80021e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e2:	f7fe fd91 	bl	8000d08 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80021ea:	f7ff b896 	b.w	800131a <HAL_SYSTICK_IRQHandler>
	...

080021f0 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021f0:	4801      	ldr	r0, [pc, #4]	; (80021f8 <ADC_IRQHandler+0x8>)
 80021f2:	f7fe bef1 	b.w	8000fd8 <HAL_ADC_IRQHandler>
 80021f6:	bf00      	nop
 80021f8:	2000002c 	.word	0x2000002c

080021fc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021fc:	4801      	ldr	r0, [pc, #4]	; (8002204 <USART2_IRQHandler+0x8>)
 80021fe:	f7ff bd99 	b.w	8001d34 <HAL_UART_IRQHandler>
 8002202:	bf00      	nop
 8002204:	2000007c 	.word	0x2000007c

08002208 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002208:	490f      	ldr	r1, [pc, #60]	; (8002248 <SystemInit+0x40>)
 800220a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800220e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <SystemInit+0x44>)
 8002218:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800221a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800221c:	f042 0201 	orr.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002222:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800222a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800222e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002230:	4a07      	ldr	r2, [pc, #28]	; (8002250 <SystemInit+0x48>)
 8002232:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800223a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800223c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800223e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002242:	608b      	str	r3, [r1, #8]
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000ed00 	.word	0xe000ed00
 800224c:	40023800 	.word	0x40023800
 8002250:	24003010 	.word	0x24003010

08002254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800228c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002258:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800225a:	e003      	b.n	8002264 <LoopCopyDataInit>

0800225c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800225e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002260:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002262:	3104      	adds	r1, #4

08002264 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002264:	480b      	ldr	r0, [pc, #44]	; (8002294 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002268:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800226a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800226c:	d3f6      	bcc.n	800225c <CopyDataInit>
  ldr  r2, =_sbss
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002270:	e002      	b.n	8002278 <LoopFillZerobss>

08002272 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002272:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002274:	f842 3b04 	str.w	r3, [r2], #4

08002278 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800227a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800227c:	d3f9      	bcc.n	8002272 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800227e:	f7ff ffc3 	bl	8002208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002282:	f000 f811 	bl	80022a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002286:	f7ff fe83 	bl	8001f90 <main>
  bx  lr    
 800228a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800228c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002290:	08002330 	.word	0x08002330
  ldr  r0, =_sdata
 8002294:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002298:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800229c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80022a0:	200000bc 	.word	0x200000bc

080022a4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <CAN1_RX0_IRQHandler>
	...

080022a8 <__libc_init_array>:
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	4e0d      	ldr	r6, [pc, #52]	; (80022e0 <__libc_init_array+0x38>)
 80022ac:	4c0d      	ldr	r4, [pc, #52]	; (80022e4 <__libc_init_array+0x3c>)
 80022ae:	1ba4      	subs	r4, r4, r6
 80022b0:	10a4      	asrs	r4, r4, #2
 80022b2:	2500      	movs	r5, #0
 80022b4:	42a5      	cmp	r5, r4
 80022b6:	d109      	bne.n	80022cc <__libc_init_array+0x24>
 80022b8:	4e0b      	ldr	r6, [pc, #44]	; (80022e8 <__libc_init_array+0x40>)
 80022ba:	4c0c      	ldr	r4, [pc, #48]	; (80022ec <__libc_init_array+0x44>)
 80022bc:	f000 f818 	bl	80022f0 <_init>
 80022c0:	1ba4      	subs	r4, r4, r6
 80022c2:	10a4      	asrs	r4, r4, #2
 80022c4:	2500      	movs	r5, #0
 80022c6:	42a5      	cmp	r5, r4
 80022c8:	d105      	bne.n	80022d6 <__libc_init_array+0x2e>
 80022ca:	bd70      	pop	{r4, r5, r6, pc}
 80022cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022d0:	4798      	blx	r3
 80022d2:	3501      	adds	r5, #1
 80022d4:	e7ee      	b.n	80022b4 <__libc_init_array+0xc>
 80022d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022da:	4798      	blx	r3
 80022dc:	3501      	adds	r5, #1
 80022de:	e7f2      	b.n	80022c6 <__libc_init_array+0x1e>
 80022e0:	08002328 	.word	0x08002328
 80022e4:	08002328 	.word	0x08002328
 80022e8:	08002328 	.word	0x08002328
 80022ec:	0800232c 	.word	0x0800232c

080022f0 <_init>:
 80022f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f2:	bf00      	nop
 80022f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f6:	bc08      	pop	{r3}
 80022f8:	469e      	mov	lr, r3
 80022fa:	4770      	bx	lr

080022fc <_fini>:
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	bf00      	nop
 8002300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002302:	bc08      	pop	{r3}
 8002304:	469e      	mov	lr, r3
 8002306:	4770      	bx	lr
