
Uart3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001630  08001630  00011630  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001648  08001648  00011648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001650  08001650  00011650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001654  08001654  00011654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          00000068  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000006c  2000006c  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000c166  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001c15  00000000  00000000  0002c19a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002802  00000000  00000000  0002ddaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000548  00000000  00000000  000305b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a8  00000000  00000000  00030b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000031db  00000000  00000000  000311a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002493  00000000  00000000  00034383  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00036816  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000d68  00000000  00000000  00036894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001618 	.word	0x08001618

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001618 	.word	0x08001618

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_InitTick+0x24>)
{
 80004dc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e8:	f000 f884 	bl	80005f4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ec:	2200      	movs	r2, #0
 80004ee:	4621      	mov	r1, r4
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f000 f83e 	bl	8000574 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004f8:	2000      	movs	r0, #0
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	20000000 	.word	0x20000000

08000500 <HAL_Init>:
{
 8000500:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f817 	bl	8000550 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ffd8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000528:	f000 ff8c 	bl	8001444 <HAL_MspInit>
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000534:	4a02      	ldr	r2, [pc, #8]	; (8000540 <HAL_IncTick+0xc>)
 8000536:	6813      	ldr	r3, [r2, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000020 	.word	0x20000020

08000544 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <HAL_GetTick+0x8>)
 8000546:	6818      	ldr	r0, [r3, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000020 	.word	0x20000020

08000550 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000552:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000554:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000558:	041b      	lsls	r3, r3, #16
 800055a:	0c1b      	lsrs	r3, r3, #16
 800055c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000560:	0200      	lsls	r0, r0, #8
 8000562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000566:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800056a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800056c:	60d3      	str	r3, [r2, #12]
 800056e:	4770      	bx	lr
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	68dc      	ldr	r4, [r3, #12]
 800057a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000582:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000584:	2b04      	cmp	r3, #4
 8000586:	bf28      	it	cs
 8000588:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058c:	f04f 0501 	mov.w	r5, #1
 8000590:	fa05 f303 	lsl.w	r3, r5, r3
 8000594:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000598:	bf8c      	ite	hi
 800059a:	3c03      	subhi	r4, #3
 800059c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059e:	4019      	ands	r1, r3
 80005a0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a2:	fa05 f404 	lsl.w	r4, r5, r4
 80005a6:	3c01      	subs	r4, #1
 80005a8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	ea42 0201 	orr.w	r2, r2, r1
 80005b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	bfaf      	iteee	ge
 80005b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	f000 000f 	andlt.w	r0, r0, #15
 80005be:	4b06      	ldrlt	r3, [pc, #24]	; (80005d8 <HAL_NVIC_SetPriority+0x64>)
 80005c0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	bfa5      	ittet	ge
 80005c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005c8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	e000ed14 	.word	0xe000ed14

080005dc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005dc:	0942      	lsrs	r2, r0, #5
 80005de:	2301      	movs	r3, #1
 80005e0:	f000 001f 	and.w	r0, r0, #31
 80005e4:	fa03 f000 	lsl.w	r0, r3, r0
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <HAL_NVIC_EnableIRQ+0x14>)
 80005ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005ee:	4770      	bx	lr
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f4:	3801      	subs	r0, #1
 80005f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005fa:	d20a      	bcs.n	8000612 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000600:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	21f0      	movs	r1, #240	; 0xf0
 8000604:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000608:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800060c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000e010 	.word	0xe000e010
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000622:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000624:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000626:	bf0c      	ite	eq
 8000628:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800062c:	f022 0204 	bicne.w	r2, r2, #4
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	4770      	bx	lr
 8000634:	e000e010 	.word	0xe000e010

08000638 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000638:	4770      	bx	lr

0800063a <HAL_SYSTICK_IRQHandler>:
{
 800063a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800063c:	f7ff fffc 	bl	8000638 <HAL_SYSTICK_Callback>
 8000640:	bd08      	pop	{r3, pc}

08000642 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000642:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000646:	2b02      	cmp	r3, #2
 8000648:	d003      	beq.n	8000652 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800064e:	2001      	movs	r0, #1
 8000650:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000652:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000654:	2305      	movs	r3, #5
 8000656:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800065a:	6813      	ldr	r3, [r2, #0]
 800065c:	f023 0301 	bic.w	r3, r3, #1
 8000660:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000662:	2000      	movs	r0, #0
}
 8000664:	4770      	bx	lr
	...

08000668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800066c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800066e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000670:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000820 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000674:	4a68      	ldr	r2, [pc, #416]	; (8000818 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000676:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000824 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800067c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800067e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000682:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000684:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000688:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800068c:	45b6      	cmp	lr, r6
 800068e:	f040 80ae 	bne.w	80007ee <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000692:	684c      	ldr	r4, [r1, #4]
 8000694:	f024 0710 	bic.w	r7, r4, #16
 8000698:	2f02      	cmp	r7, #2
 800069a:	d116      	bne.n	80006ca <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800069c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006a0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006a4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006a8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006ac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006b0:	f04f 0c0f 	mov.w	ip, #15
 80006b4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006b8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006bc:	690d      	ldr	r5, [r1, #16]
 80006be:	fa05 f50b 	lsl.w	r5, r5, fp
 80006c2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006c6:	f8ca 5020 	str.w	r5, [sl, #32]
 80006ca:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006ce:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006d0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006d4:	fa05 f50a 	lsl.w	r5, r5, sl
 80006d8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006da:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006de:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ec:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006ee:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f2:	d811      	bhi.n	8000718 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80006f4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006f6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006fa:	68cf      	ldr	r7, [r1, #12]
 80006fc:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000700:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000704:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000706:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000708:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800070c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000710:	409f      	lsls	r7, r3
 8000712:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000716:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000718:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800071a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800071c:	688f      	ldr	r7, [r1, #8]
 800071e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000722:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000724:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000726:	00e5      	lsls	r5, r4, #3
 8000728:	d561      	bpl.n	80007ee <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	f04f 0b00 	mov.w	fp, #0
 800072e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000732:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000736:	4d39      	ldr	r5, [pc, #228]	; (800081c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000738:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800073c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000740:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000744:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000748:	9703      	str	r7, [sp, #12]
 800074a:	9f03      	ldr	r7, [sp, #12]
 800074c:	f023 0703 	bic.w	r7, r3, #3
 8000750:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000754:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000758:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800075c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000760:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000764:	f04f 0e0f 	mov.w	lr, #15
 8000768:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800076e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000772:	d043      	beq.n	80007fc <HAL_GPIO_Init+0x194>
 8000774:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000778:	42a8      	cmp	r0, r5
 800077a:	d041      	beq.n	8000800 <HAL_GPIO_Init+0x198>
 800077c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000780:	42a8      	cmp	r0, r5
 8000782:	d03f      	beq.n	8000804 <HAL_GPIO_Init+0x19c>
 8000784:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000788:	42a8      	cmp	r0, r5
 800078a:	d03d      	beq.n	8000808 <HAL_GPIO_Init+0x1a0>
 800078c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000790:	42a8      	cmp	r0, r5
 8000792:	d03b      	beq.n	800080c <HAL_GPIO_Init+0x1a4>
 8000794:	4548      	cmp	r0, r9
 8000796:	d03b      	beq.n	8000810 <HAL_GPIO_Init+0x1a8>
 8000798:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800079c:	42a8      	cmp	r0, r5
 800079e:	d039      	beq.n	8000814 <HAL_GPIO_Init+0x1ac>
 80007a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a4:	42a8      	cmp	r0, r5
 80007a6:	bf14      	ite	ne
 80007a8:	2508      	movne	r5, #8
 80007aa:	2507      	moveq	r5, #7
 80007ac:	fa05 f50c 	lsl.w	r5, r5, ip
 80007b0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007b4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007b6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007b8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007ba:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007be:	bf0c      	ite	eq
 80007c0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007c2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007c4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007c6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007c8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007cc:	bf0c      	ite	eq
 80007ce:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007d0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007d2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007d4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007da:	bf0c      	ite	eq
 80007dc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007de:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007e0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007e2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007e4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007e6:	bf54      	ite	pl
 80007e8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007ea:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007ec:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ee:	3301      	adds	r3, #1
 80007f0:	2b10      	cmp	r3, #16
 80007f2:	f47f af44 	bne.w	800067e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007f6:	b005      	add	sp, #20
 80007f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007fc:	465d      	mov	r5, fp
 80007fe:	e7d5      	b.n	80007ac <HAL_GPIO_Init+0x144>
 8000800:	2501      	movs	r5, #1
 8000802:	e7d3      	b.n	80007ac <HAL_GPIO_Init+0x144>
 8000804:	2502      	movs	r5, #2
 8000806:	e7d1      	b.n	80007ac <HAL_GPIO_Init+0x144>
 8000808:	2503      	movs	r5, #3
 800080a:	e7cf      	b.n	80007ac <HAL_GPIO_Init+0x144>
 800080c:	2504      	movs	r5, #4
 800080e:	e7cd      	b.n	80007ac <HAL_GPIO_Init+0x144>
 8000810:	2505      	movs	r5, #5
 8000812:	e7cb      	b.n	80007ac <HAL_GPIO_Init+0x144>
 8000814:	2506      	movs	r5, #6
 8000816:	e7c9      	b.n	80007ac <HAL_GPIO_Init+0x144>
 8000818:	40013c00 	.word	0x40013c00
 800081c:	40020000 	.word	0x40020000
 8000820:	40023800 	.word	0x40023800
 8000824:	40021400 	.word	0x40021400

08000828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800082a:	4604      	mov	r4, r0
 800082c:	b910      	cbnz	r0, 8000834 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 800082e:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000830:	b003      	add	sp, #12
 8000832:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000834:	6803      	ldr	r3, [r0, #0]
 8000836:	07d8      	lsls	r0, r3, #31
 8000838:	d43b      	bmi.n	80008b2 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	0799      	lsls	r1, r3, #30
 800083e:	f100 8084 	bmi.w	800094a <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000842:	6823      	ldr	r3, [r4, #0]
 8000844:	071e      	lsls	r6, r3, #28
 8000846:	f100 80c6 	bmi.w	80009d6 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800084a:	6823      	ldr	r3, [r4, #0]
 800084c:	075d      	lsls	r5, r3, #29
 800084e:	d52a      	bpl.n	80008a6 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	4baa      	ldr	r3, [pc, #680]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 8000856:	4dab      	ldr	r5, [pc, #684]	; (8000b04 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800086a:	682b      	ldr	r3, [r5, #0]
 800086c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000870:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000872:	f7ff fe67 	bl	8000544 <HAL_GetTick>
 8000876:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000878:	682b      	ldr	r3, [r5, #0]
 800087a:	05da      	lsls	r2, r3, #23
 800087c:	f140 80cd 	bpl.w	8000a1a <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000880:	68a3      	ldr	r3, [r4, #8]
 8000882:	4d9f      	ldr	r5, [pc, #636]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
 8000884:	2b01      	cmp	r3, #1
 8000886:	f040 80cf 	bne.w	8000a28 <HAL_RCC_OscConfig+0x200>
 800088a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000892:	f7ff fe57 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000896:	4d9a      	ldr	r5, [pc, #616]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000898:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800089a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800089e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80008a0:	079b      	lsls	r3, r3, #30
 80008a2:	f140 80e2 	bpl.w	8000a6a <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008a6:	69a2      	ldr	r2, [r4, #24]
 80008a8:	2a00      	cmp	r2, #0
 80008aa:	f040 80e5 	bne.w	8000a78 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 80008ae:	2000      	movs	r0, #0
 80008b0:	e7be      	b.n	8000830 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008b2:	4b93      	ldr	r3, [pc, #588]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	f002 020c 	and.w	r2, r2, #12
 80008ba:	2a04      	cmp	r2, #4
 80008bc:	d007      	beq.n	80008ce <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008c4:	2a08      	cmp	r2, #8
 80008c6:	d10a      	bne.n	80008de <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	025a      	lsls	r2, r3, #9
 80008cc:	d507      	bpl.n	80008de <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ce:	4b8c      	ldr	r3, [pc, #560]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	039b      	lsls	r3, r3, #14
 80008d4:	d5b1      	bpl.n	800083a <HAL_RCC_OscConfig+0x12>
 80008d6:	6863      	ldr	r3, [r4, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1ae      	bne.n	800083a <HAL_RCC_OscConfig+0x12>
 80008dc:	e7a7      	b.n	800082e <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008de:	6863      	ldr	r3, [r4, #4]
 80008e0:	4d87      	ldr	r5, [pc, #540]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
 80008e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008e6:	d111      	bne.n	800090c <HAL_RCC_OscConfig+0xe4>
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008f0:	f7ff fe28 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f4:	4d82      	ldr	r5, [pc, #520]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80008f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f8:	682b      	ldr	r3, [r5, #0]
 80008fa:	039f      	lsls	r7, r3, #14
 80008fc:	d49d      	bmi.n	800083a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008fe:	f7ff fe21 	bl	8000544 <HAL_GetTick>
 8000902:	1b80      	subs	r0, r0, r6
 8000904:	2864      	cmp	r0, #100	; 0x64
 8000906:	d9f7      	bls.n	80008f8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000908:	2003      	movs	r0, #3
 800090a:	e791      	b.n	8000830 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800090c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000910:	d104      	bne.n	800091c <HAL_RCC_OscConfig+0xf4>
 8000912:	682b      	ldr	r3, [r5, #0]
 8000914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000918:	602b      	str	r3, [r5, #0]
 800091a:	e7e5      	b.n	80008e8 <HAL_RCC_OscConfig+0xc0>
 800091c:	682a      	ldr	r2, [r5, #0]
 800091e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000922:	602a      	str	r2, [r5, #0]
 8000924:	682a      	ldr	r2, [r5, #0]
 8000926:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800092a:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1df      	bne.n	80008f0 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8000930:	f7ff fe08 	bl	8000544 <HAL_GetTick>
 8000934:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000936:	682b      	ldr	r3, [r5, #0]
 8000938:	0398      	lsls	r0, r3, #14
 800093a:	f57f af7e 	bpl.w	800083a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800093e:	f7ff fe01 	bl	8000544 <HAL_GetTick>
 8000942:	1b80      	subs	r0, r0, r6
 8000944:	2864      	cmp	r0, #100	; 0x64
 8000946:	d9f6      	bls.n	8000936 <HAL_RCC_OscConfig+0x10e>
 8000948:	e7de      	b.n	8000908 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800094a:	4b6d      	ldr	r3, [pc, #436]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	f012 0f0c 	tst.w	r2, #12
 8000952:	d007      	beq.n	8000964 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800095a:	2a08      	cmp	r2, #8
 800095c:	d112      	bne.n	8000984 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	0259      	lsls	r1, r3, #9
 8000962:	d40f      	bmi.n	8000984 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000964:	4b66      	ldr	r3, [pc, #408]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	0792      	lsls	r2, r2, #30
 800096a:	d503      	bpl.n	8000974 <HAL_RCC_OscConfig+0x14c>
 800096c:	68e2      	ldr	r2, [r4, #12]
 800096e:	2a01      	cmp	r2, #1
 8000970:	f47f af5d 	bne.w	800082e <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	6921      	ldr	r1, [r4, #16]
 8000978:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800097c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000980:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000982:	e75e      	b.n	8000842 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000984:	68e2      	ldr	r2, [r4, #12]
 8000986:	4b60      	ldr	r3, [pc, #384]	; (8000b08 <HAL_RCC_OscConfig+0x2e0>)
 8000988:	b1b2      	cbz	r2, 80009b8 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800098e:	f7ff fdd9 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000992:	4d5b      	ldr	r5, [pc, #364]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000994:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000996:	682b      	ldr	r3, [r5, #0]
 8000998:	079b      	lsls	r3, r3, #30
 800099a:	d507      	bpl.n	80009ac <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	6922      	ldr	r2, [r4, #16]
 80009a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009a8:	602b      	str	r3, [r5, #0]
 80009aa:	e74a      	b.n	8000842 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ac:	f7ff fdca 	bl	8000544 <HAL_GetTick>
 80009b0:	1b80      	subs	r0, r0, r6
 80009b2:	2802      	cmp	r0, #2
 80009b4:	d9ef      	bls.n	8000996 <HAL_RCC_OscConfig+0x16e>
 80009b6:	e7a7      	b.n	8000908 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 80009b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009ba:	f7ff fdc3 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009be:	4d50      	ldr	r5, [pc, #320]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80009c0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c2:	682b      	ldr	r3, [r5, #0]
 80009c4:	079f      	lsls	r7, r3, #30
 80009c6:	f57f af3c 	bpl.w	8000842 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ca:	f7ff fdbb 	bl	8000544 <HAL_GetTick>
 80009ce:	1b80      	subs	r0, r0, r6
 80009d0:	2802      	cmp	r0, #2
 80009d2:	d9f6      	bls.n	80009c2 <HAL_RCC_OscConfig+0x19a>
 80009d4:	e798      	b.n	8000908 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009d6:	6962      	ldr	r2, [r4, #20]
 80009d8:	4b4c      	ldr	r3, [pc, #304]	; (8000b0c <HAL_RCC_OscConfig+0x2e4>)
 80009da:	b17a      	cbz	r2, 80009fc <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 80009dc:	2201      	movs	r2, #1
 80009de:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009e0:	f7ff fdb0 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e4:	4d46      	ldr	r5, [pc, #280]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80009e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009ea:	0798      	lsls	r0, r3, #30
 80009ec:	f53f af2d 	bmi.w	800084a <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f0:	f7ff fda8 	bl	8000544 <HAL_GetTick>
 80009f4:	1b80      	subs	r0, r0, r6
 80009f6:	2802      	cmp	r0, #2
 80009f8:	d9f6      	bls.n	80009e8 <HAL_RCC_OscConfig+0x1c0>
 80009fa:	e785      	b.n	8000908 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 80009fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009fe:	f7ff fda1 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a02:	4d3f      	ldr	r5, [pc, #252]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000a04:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a06:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a08:	0799      	lsls	r1, r3, #30
 8000a0a:	f57f af1e 	bpl.w	800084a <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a0e:	f7ff fd99 	bl	8000544 <HAL_GetTick>
 8000a12:	1b80      	subs	r0, r0, r6
 8000a14:	2802      	cmp	r0, #2
 8000a16:	d9f6      	bls.n	8000a06 <HAL_RCC_OscConfig+0x1de>
 8000a18:	e776      	b.n	8000908 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a1a:	f7ff fd93 	bl	8000544 <HAL_GetTick>
 8000a1e:	1b80      	subs	r0, r0, r6
 8000a20:	2802      	cmp	r0, #2
 8000a22:	f67f af29 	bls.w	8000878 <HAL_RCC_OscConfig+0x50>
 8000a26:	e76f      	b.n	8000908 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a28:	2b05      	cmp	r3, #5
 8000a2a:	d104      	bne.n	8000a36 <HAL_RCC_OscConfig+0x20e>
 8000a2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	672b      	str	r3, [r5, #112]	; 0x70
 8000a34:	e729      	b.n	800088a <HAL_RCC_OscConfig+0x62>
 8000a36:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a38:	f022 0201 	bic.w	r2, r2, #1
 8000a3c:	672a      	str	r2, [r5, #112]	; 0x70
 8000a3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a40:	f022 0204 	bic.w	r2, r2, #4
 8000a44:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f47f af23 	bne.w	8000892 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8000a4c:	f7ff fd7a 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a50:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a54:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a56:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a58:	0798      	lsls	r0, r3, #30
 8000a5a:	f57f af24 	bpl.w	80008a6 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a5e:	f7ff fd71 	bl	8000544 <HAL_GetTick>
 8000a62:	1b80      	subs	r0, r0, r6
 8000a64:	42b8      	cmp	r0, r7
 8000a66:	d9f6      	bls.n	8000a56 <HAL_RCC_OscConfig+0x22e>
 8000a68:	e74e      	b.n	8000908 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a6a:	f7ff fd6b 	bl	8000544 <HAL_GetTick>
 8000a6e:	1b80      	subs	r0, r0, r6
 8000a70:	42b8      	cmp	r0, r7
 8000a72:	f67f af14 	bls.w	800089e <HAL_RCC_OscConfig+0x76>
 8000a76:	e747      	b.n	8000908 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a78:	4d21      	ldr	r5, [pc, #132]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
 8000a7a:	68ab      	ldr	r3, [r5, #8]
 8000a7c:	f003 030c 	and.w	r3, r3, #12
 8000a80:	2b08      	cmp	r3, #8
 8000a82:	f43f aed4 	beq.w	800082e <HAL_RCC_OscConfig+0x6>
 8000a86:	4e22      	ldr	r6, [pc, #136]	; (8000b10 <HAL_RCC_OscConfig+0x2e8>)
 8000a88:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a8a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a8c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a8e:	d12a      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8000a90:	f7ff fd58 	bl	8000544 <HAL_GetTick>
 8000a94:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a96:	682b      	ldr	r3, [r5, #0]
 8000a98:	0199      	lsls	r1, r3, #6
 8000a9a:	d41e      	bmi.n	8000ada <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a9c:	6a22      	ldr	r2, [r4, #32]
 8000a9e:	69e3      	ldr	r3, [r4, #28]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000aa4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000aa8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000aaa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000aae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ab0:	4c13      	ldr	r4, [pc, #76]	; (8000b00 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ab2:	0852      	lsrs	r2, r2, #1
 8000ab4:	3a01      	subs	r2, #1
 8000ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000abc:	2301      	movs	r3, #1
 8000abe:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ac0:	f7ff fd40 	bl	8000544 <HAL_GetTick>
 8000ac4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	019a      	lsls	r2, r3, #6
 8000aca:	f53f aef0 	bmi.w	80008ae <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ace:	f7ff fd39 	bl	8000544 <HAL_GetTick>
 8000ad2:	1b40      	subs	r0, r0, r5
 8000ad4:	2802      	cmp	r0, #2
 8000ad6:	d9f6      	bls.n	8000ac6 <HAL_RCC_OscConfig+0x29e>
 8000ad8:	e716      	b.n	8000908 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ada:	f7ff fd33 	bl	8000544 <HAL_GetTick>
 8000ade:	1bc0      	subs	r0, r0, r7
 8000ae0:	2802      	cmp	r0, #2
 8000ae2:	d9d8      	bls.n	8000a96 <HAL_RCC_OscConfig+0x26e>
 8000ae4:	e710      	b.n	8000908 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8000ae6:	f7ff fd2d 	bl	8000544 <HAL_GetTick>
 8000aea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000aec:	682b      	ldr	r3, [r5, #0]
 8000aee:	019b      	lsls	r3, r3, #6
 8000af0:	f57f aedd 	bpl.w	80008ae <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000af4:	f7ff fd26 	bl	8000544 <HAL_GetTick>
 8000af8:	1b00      	subs	r0, r0, r4
 8000afa:	2802      	cmp	r0, #2
 8000afc:	d9f6      	bls.n	8000aec <HAL_RCC_OscConfig+0x2c4>
 8000afe:	e703      	b.n	8000908 <HAL_RCC_OscConfig+0xe0>
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000
 8000b08:	42470000 	.word	0x42470000
 8000b0c:	42470e80 	.word	0x42470e80
 8000b10:	42470060 	.word	0x42470060

08000b14 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b14:	4913      	ldr	r1, [pc, #76]	; (8000b64 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b16:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b18:	688b      	ldr	r3, [r1, #8]
 8000b1a:	f003 030c 	and.w	r3, r3, #12
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d003      	beq.n	8000b2a <HAL_RCC_GetSysClockFreq+0x16>
 8000b22:	2b08      	cmp	r3, #8
 8000b24:	d003      	beq.n	8000b2e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b26:	4810      	ldr	r0, [pc, #64]	; (8000b68 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b28:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b2a:	4810      	ldr	r0, [pc, #64]	; (8000b6c <HAL_RCC_GetSysClockFreq+0x58>)
 8000b2c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b2e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b30:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b32:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b34:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b38:	bf14      	ite	ne
 8000b3a:	480c      	ldrne	r0, [pc, #48]	; (8000b6c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b3c:	480a      	ldreq	r0, [pc, #40]	; (8000b68 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b3e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b42:	bf18      	it	ne
 8000b44:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b4a:	fba1 0100 	umull	r0, r1, r1, r0
 8000b4e:	f7ff fb3b 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b62:	bd08      	pop	{r3, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	00f42400 	.word	0x00f42400
 8000b6c:	007a1200 	.word	0x007a1200

08000b70 <HAL_RCC_ClockConfig>:
{
 8000b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b74:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b76:	4604      	mov	r4, r0
 8000b78:	b910      	cbnz	r0, 8000b80 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b80:	4b44      	ldr	r3, [pc, #272]	; (8000c94 <HAL_RCC_ClockConfig+0x124>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	f002 020f 	and.w	r2, r2, #15
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	d328      	bcc.n	8000bde <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b8c:	6821      	ldr	r1, [r4, #0]
 8000b8e:	078f      	lsls	r7, r1, #30
 8000b90:	d42d      	bmi.n	8000bee <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b92:	07c8      	lsls	r0, r1, #31
 8000b94:	d440      	bmi.n	8000c18 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b96:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <HAL_RCC_ClockConfig+0x124>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	f002 020f 	and.w	r2, r2, #15
 8000b9e:	4295      	cmp	r5, r2
 8000ba0:	d366      	bcc.n	8000c70 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ba2:	6822      	ldr	r2, [r4, #0]
 8000ba4:	0751      	lsls	r1, r2, #29
 8000ba6:	d46c      	bmi.n	8000c82 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ba8:	0713      	lsls	r3, r2, #28
 8000baa:	d507      	bpl.n	8000bbc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bac:	4a3a      	ldr	r2, [pc, #232]	; (8000c98 <HAL_RCC_ClockConfig+0x128>)
 8000bae:	6921      	ldr	r1, [r4, #16]
 8000bb0:	6893      	ldr	r3, [r2, #8]
 8000bb2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bbc:	f7ff ffaa 	bl	8000b14 <HAL_RCC_GetSysClockFreq>
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <HAL_RCC_ClockConfig+0x128>)
 8000bc2:	4a36      	ldr	r2, [pc, #216]	; (8000c9c <HAL_RCC_ClockConfig+0x12c>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	40d8      	lsrs	r0, r3
 8000bce:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <HAL_RCC_ClockConfig+0x130>)
 8000bd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff fc80 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	4299      	cmp	r1, r3
 8000bea:	d1c6      	bne.n	8000b7a <HAL_RCC_ClockConfig+0xa>
 8000bec:	e7ce      	b.n	8000b8c <HAL_RCC_ClockConfig+0x1c>
 8000bee:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bf0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	689a      	ldrne	r2, [r3, #8]
 8000bf8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000bfc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bfe:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c00:	bf42      	ittt	mi
 8000c02:	689a      	ldrmi	r2, [r3, #8]
 8000c04:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c08:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	68a0      	ldr	r0, [r4, #8]
 8000c0e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c12:	4302      	orrs	r2, r0
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	e7bc      	b.n	8000b92 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c18:	6862      	ldr	r2, [r4, #4]
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <HAL_RCC_ClockConfig+0x128>)
 8000c1c:	2a01      	cmp	r2, #1
 8000c1e:	d11d      	bne.n	8000c5c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c26:	d0a8      	beq.n	8000b7a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c28:	4e1b      	ldr	r6, [pc, #108]	; (8000c98 <HAL_RCC_ClockConfig+0x128>)
 8000c2a:	68b3      	ldr	r3, [r6, #8]
 8000c2c:	f023 0303 	bic.w	r3, r3, #3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c34:	f7ff fc86 	bl	8000544 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c38:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c3c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c3e:	68b3      	ldr	r3, [r6, #8]
 8000c40:	6862      	ldr	r2, [r4, #4]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c4a:	d0a4      	beq.n	8000b96 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c4c:	f7ff fc7a 	bl	8000544 <HAL_GetTick>
 8000c50:	1bc0      	subs	r0, r0, r7
 8000c52:	4540      	cmp	r0, r8
 8000c54:	d9f3      	bls.n	8000c3e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c56:	2003      	movs	r0, #3
}
 8000c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c5c:	1e91      	subs	r1, r2, #2
 8000c5e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c60:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c62:	d802      	bhi.n	8000c6a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c68:	e7dd      	b.n	8000c26 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6a:	f013 0f02 	tst.w	r3, #2
 8000c6e:	e7da      	b.n	8000c26 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c70:	b2ea      	uxtb	r2, r5
 8000c72:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	429d      	cmp	r5, r3
 8000c7c:	f47f af7d 	bne.w	8000b7a <HAL_RCC_ClockConfig+0xa>
 8000c80:	e78f      	b.n	8000ba2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c82:	4905      	ldr	r1, [pc, #20]	; (8000c98 <HAL_RCC_ClockConfig+0x128>)
 8000c84:	68e0      	ldr	r0, [r4, #12]
 8000c86:	688b      	ldr	r3, [r1, #8]
 8000c88:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c8c:	4303      	orrs	r3, r0
 8000c8e:	608b      	str	r3, [r1, #8]
 8000c90:	e78a      	b.n	8000ba8 <HAL_RCC_ClockConfig+0x38>
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	08001630 	.word	0x08001630
 8000ca0:	20000000 	.word	0x20000000

08000ca4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ca4:	4b01      	ldr	r3, [pc, #4]	; (8000cac <HAL_RCC_GetHCLKFreq+0x8>)
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000000 	.word	0x20000000

08000cb0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000cba:	5cd3      	ldrb	r3, [r2, r3]
 8000cbc:	4a03      	ldr	r2, [pc, #12]	; (8000ccc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cbe:	6810      	ldr	r0, [r2, #0]
}
 8000cc0:	40d8      	lsrs	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	08001640 	.word	0x08001640
 8000ccc:	20000000 	.word	0x20000000

08000cd0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000cda:	5cd3      	ldrb	r3, [r2, r3]
 8000cdc:	4a03      	ldr	r2, [pc, #12]	; (8000cec <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000cde:	6810      	ldr	r0, [r2, #0]
}
 8000ce0:	40d8      	lsrs	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	08001640 	.word	0x08001640
 8000cec:	20000000 	.word	0x20000000

08000cf0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000cf0:	6803      	ldr	r3, [r0, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000cf8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000cfa:	695a      	ldr	r2, [r3, #20]
 8000cfc:	f022 0201 	bic.w	r2, r2, #1
 8000d00:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000d02:	2320      	movs	r3, #32
 8000d04:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000d08:	4770      	bx	lr
	...

08000d0c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000d10:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000d12:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000d14:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d16:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000d18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000d1c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000d1e:	6133      	str	r3, [r6, #16]
{
 8000d20:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d22:	6883      	ldr	r3, [r0, #8]
 8000d24:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000d26:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d28:	4303      	orrs	r3, r0
 8000d2a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000d2c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d30:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000d32:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d36:	430b      	orrs	r3, r1
 8000d38:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000d3a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000d3c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000d3e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000d44:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d46:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000d4a:	6173      	str	r3, [r6, #20]
 8000d4c:	4b7a      	ldr	r3, [pc, #488]	; (8000f38 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d4e:	d17c      	bne.n	8000e4a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000d50:	429e      	cmp	r6, r3
 8000d52:	d003      	beq.n	8000d5c <UART_SetConfig+0x50>
 8000d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d58:	429e      	cmp	r6, r3
 8000d5a:	d144      	bne.n	8000de6 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000d5c:	f7ff ffb8 	bl	8000cd0 <HAL_RCC_GetPCLK2Freq>
 8000d60:	2519      	movs	r5, #25
 8000d62:	fb05 f300 	mul.w	r3, r5, r0
 8000d66:	6860      	ldr	r0, [r4, #4]
 8000d68:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000d6c:	0040      	lsls	r0, r0, #1
 8000d6e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d72:	fbb3 f3f9 	udiv	r3, r3, r9
 8000d76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000d7a:	f7ff ffa9 	bl	8000cd0 <HAL_RCC_GetPCLK2Freq>
 8000d7e:	6863      	ldr	r3, [r4, #4]
 8000d80:	4368      	muls	r0, r5
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fbb0 f7f3 	udiv	r7, r0, r3
 8000d88:	f7ff ffa2 	bl	8000cd0 <HAL_RCC_GetPCLK2Freq>
 8000d8c:	6863      	ldr	r3, [r4, #4]
 8000d8e:	4368      	muls	r0, r5
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d96:	fbb3 f3f9 	udiv	r3, r3, r9
 8000d9a:	fb09 7313 	mls	r3, r9, r3, r7
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	3332      	adds	r3, #50	; 0x32
 8000da2:	fbb3 f3f9 	udiv	r3, r3, r9
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000dac:	f7ff ff90 	bl	8000cd0 <HAL_RCC_GetPCLK2Freq>
 8000db0:	6862      	ldr	r2, [r4, #4]
 8000db2:	4368      	muls	r0, r5
 8000db4:	0052      	lsls	r2, r2, #1
 8000db6:	fbb0 faf2 	udiv	sl, r0, r2
 8000dba:	f7ff ff89 	bl	8000cd0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000dbe:	6863      	ldr	r3, [r4, #4]
 8000dc0:	4368      	muls	r0, r5
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dc8:	fbb3 f3f9 	udiv	r3, r3, r9
 8000dcc:	fb09 a313 	mls	r3, r9, r3, sl
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	3332      	adds	r3, #50	; 0x32
 8000dd4:	fbb3 f3f9 	udiv	r3, r3, r9
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000dde:	443b      	add	r3, r7
 8000de0:	60b3      	str	r3, [r6, #8]
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000de6:	f7ff ff63 	bl	8000cb0 <HAL_RCC_GetPCLK1Freq>
 8000dea:	2519      	movs	r5, #25
 8000dec:	fb05 f300 	mul.w	r3, r5, r0
 8000df0:	6860      	ldr	r0, [r4, #4]
 8000df2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000df6:	0040      	lsls	r0, r0, #1
 8000df8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000dfc:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000e04:	f7ff ff54 	bl	8000cb0 <HAL_RCC_GetPCLK1Freq>
 8000e08:	6863      	ldr	r3, [r4, #4]
 8000e0a:	4368      	muls	r0, r5
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e12:	f7ff ff4d 	bl	8000cb0 <HAL_RCC_GetPCLK1Freq>
 8000e16:	6863      	ldr	r3, [r4, #4]
 8000e18:	4368      	muls	r0, r5
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e20:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e24:	fb09 7313 	mls	r3, r9, r3, r7
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	3332      	adds	r3, #50	; 0x32
 8000e2c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000e36:	f7ff ff3b 	bl	8000cb0 <HAL_RCC_GetPCLK1Freq>
 8000e3a:	6862      	ldr	r2, [r4, #4]
 8000e3c:	4368      	muls	r0, r5
 8000e3e:	0052      	lsls	r2, r2, #1
 8000e40:	fbb0 faf2 	udiv	sl, r0, r2
 8000e44:	f7ff ff34 	bl	8000cb0 <HAL_RCC_GetPCLK1Freq>
 8000e48:	e7b9      	b.n	8000dbe <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e4a:	429e      	cmp	r6, r3
 8000e4c:	d002      	beq.n	8000e54 <UART_SetConfig+0x148>
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <UART_SetConfig+0x230>)
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d140      	bne.n	8000ed6 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000e54:	f7ff ff3c 	bl	8000cd0 <HAL_RCC_GetPCLK2Freq>
 8000e58:	6867      	ldr	r7, [r4, #4]
 8000e5a:	2519      	movs	r5, #25
 8000e5c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000e60:	fb05 f300 	mul.w	r3, r5, r0
 8000e64:	00bf      	lsls	r7, r7, #2
 8000e66:	fbb3 f3f7 	udiv	r3, r3, r7
 8000e6a:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e6e:	011f      	lsls	r7, r3, #4
 8000e70:	f7ff ff2e 	bl	8000cd0 <HAL_RCC_GetPCLK2Freq>
 8000e74:	6863      	ldr	r3, [r4, #4]
 8000e76:	4368      	muls	r0, r5
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	fbb0 f8f3 	udiv	r8, r0, r3
 8000e7e:	f7ff ff27 	bl	8000cd0 <HAL_RCC_GetPCLK2Freq>
 8000e82:	6863      	ldr	r3, [r4, #4]
 8000e84:	4368      	muls	r0, r5
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e8c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e90:	fb09 8313 	mls	r3, r9, r3, r8
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	3332      	adds	r3, #50	; 0x32
 8000e98:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e9c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000ea0:	f7ff ff16 	bl	8000cd0 <HAL_RCC_GetPCLK2Freq>
 8000ea4:	6862      	ldr	r2, [r4, #4]
 8000ea6:	4368      	muls	r0, r5
 8000ea8:	0092      	lsls	r2, r2, #2
 8000eaa:	fbb0 faf2 	udiv	sl, r0, r2
 8000eae:	f7ff ff0f 	bl	8000cd0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000eb2:	6863      	ldr	r3, [r4, #4]
 8000eb4:	4368      	muls	r0, r5
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ebc:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ec0:	fb09 a313 	mls	r3, r9, r3, sl
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	3332      	adds	r3, #50	; 0x32
 8000ec8:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ecc:	f003 030f 	and.w	r3, r3, #15
 8000ed0:	ea43 0308 	orr.w	r3, r3, r8
 8000ed4:	e783      	b.n	8000dde <UART_SetConfig+0xd2>
 8000ed6:	f7ff feeb 	bl	8000cb0 <HAL_RCC_GetPCLK1Freq>
 8000eda:	6867      	ldr	r7, [r4, #4]
 8000edc:	2519      	movs	r5, #25
 8000ede:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000ee2:	fb05 f300 	mul.w	r3, r5, r0
 8000ee6:	00bf      	lsls	r7, r7, #2
 8000ee8:	fbb3 f3f7 	udiv	r3, r3, r7
 8000eec:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ef0:	011f      	lsls	r7, r3, #4
 8000ef2:	f7ff fedd 	bl	8000cb0 <HAL_RCC_GetPCLK1Freq>
 8000ef6:	6863      	ldr	r3, [r4, #4]
 8000ef8:	4368      	muls	r0, r5
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	fbb0 f8f3 	udiv	r8, r0, r3
 8000f00:	f7ff fed6 	bl	8000cb0 <HAL_RCC_GetPCLK1Freq>
 8000f04:	6863      	ldr	r3, [r4, #4]
 8000f06:	4368      	muls	r0, r5
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f0e:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f12:	fb09 8313 	mls	r3, r9, r3, r8
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	3332      	adds	r3, #50	; 0x32
 8000f1a:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f1e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000f22:	f7ff fec5 	bl	8000cb0 <HAL_RCC_GetPCLK1Freq>
 8000f26:	6862      	ldr	r2, [r4, #4]
 8000f28:	4368      	muls	r0, r5
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	fbb0 faf2 	udiv	sl, r0, r2
 8000f30:	f7ff febe 	bl	8000cb0 <HAL_RCC_GetPCLK1Freq>
 8000f34:	e7bd      	b.n	8000eb2 <UART_SetConfig+0x1a6>
 8000f36:	bf00      	nop
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	40011400 	.word	0x40011400

08000f40 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f42:	4604      	mov	r4, r0
 8000f44:	460e      	mov	r6, r1
 8000f46:	4617      	mov	r7, r2
 8000f48:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000f4a:	6821      	ldr	r1, [r4, #0]
 8000f4c:	680b      	ldr	r3, [r1, #0]
 8000f4e:	ea36 0303 	bics.w	r3, r6, r3
 8000f52:	d101      	bne.n	8000f58 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000f54:	2000      	movs	r0, #0
}
 8000f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000f58:	1c6b      	adds	r3, r5, #1
 8000f5a:	d0f7      	beq.n	8000f4c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f5c:	b995      	cbnz	r5, 8000f84 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f68:	695a      	ldr	r2, [r3, #20]
 8000f6a:	f022 0201 	bic.w	r2, r2, #1
 8000f6e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000f70:	2320      	movs	r3, #32
 8000f72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000f76:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000f80:	2003      	movs	r0, #3
 8000f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f84:	f7ff fade 	bl	8000544 <HAL_GetTick>
 8000f88:	1bc0      	subs	r0, r0, r7
 8000f8a:	4285      	cmp	r5, r0
 8000f8c:	d2dd      	bcs.n	8000f4a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000f8e:	e7e6      	b.n	8000f5e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000f90 <HAL_UART_Init>:
{
 8000f90:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000f92:	4604      	mov	r4, r0
 8000f94:	b340      	cbz	r0, 8000fe8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f96:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f9e:	b91b      	cbnz	r3, 8000fa8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000fa0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000fa4:	f000 fa7e 	bl	80014a4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8000fa8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000faa:	2324      	movs	r3, #36	; 0x24
 8000fac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000fb0:	68d3      	ldr	r3, [r2, #12]
 8000fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fb6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000fb8:	4620      	mov	r0, r4
 8000fba:	f7ff fea7 	bl	8000d0c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fce:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fd6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fd8:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8000fda:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fdc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000fde:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000fe2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000fe6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
}
 8000fea:	bd10      	pop	{r4, pc}

08000fec <HAL_UART_Transmit>:
{
 8000fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8000ff2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ff6:	2b20      	cmp	r3, #32
{
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	460d      	mov	r5, r1
 8000ffc:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8000ffe:	d14f      	bne.n	80010a0 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001000:	2900      	cmp	r1, #0
 8001002:	d04a      	beq.n	800109a <HAL_UART_Transmit+0xae>
 8001004:	2a00      	cmp	r2, #0
 8001006:	d048      	beq.n	800109a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001008:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800100c:	2b01      	cmp	r3, #1
 800100e:	d047      	beq.n	80010a0 <HAL_UART_Transmit+0xb4>
 8001010:	2301      	movs	r3, #1
 8001012:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001016:	2300      	movs	r3, #0
 8001018:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800101a:	2321      	movs	r3, #33	; 0x21
 800101c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001020:	f7ff fa90 	bl	8000544 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001024:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001028:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800102a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800102e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001030:	b29b      	uxth	r3, r3
 8001032:	b96b      	cbnz	r3, 8001050 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4632      	mov	r2, r6
 8001038:	2140      	movs	r1, #64	; 0x40
 800103a:	4620      	mov	r0, r4
 800103c:	f7ff ff80 	bl	8000f40 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001040:	b9b0      	cbnz	r0, 8001070 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001042:	2320      	movs	r3, #32
 8001044:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001048:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800104c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001050:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001052:	3b01      	subs	r3, #1
 8001054:	b29b      	uxth	r3, r3
 8001056:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001058:	68a3      	ldr	r3, [r4, #8]
 800105a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800105e:	4632      	mov	r2, r6
 8001060:	463b      	mov	r3, r7
 8001062:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001066:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001068:	d10e      	bne.n	8001088 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800106a:	f7ff ff69 	bl	8000f40 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800106e:	b110      	cbz	r0, 8001076 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001070:	2003      	movs	r0, #3
 8001072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001076:	882b      	ldrh	r3, [r5, #0]
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800107e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001080:	6923      	ldr	r3, [r4, #16]
 8001082:	b943      	cbnz	r3, 8001096 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001084:	3502      	adds	r5, #2
 8001086:	e7d2      	b.n	800102e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001088:	f7ff ff5a 	bl	8000f40 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800108c:	2800      	cmp	r0, #0
 800108e:	d1ef      	bne.n	8001070 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	782a      	ldrb	r2, [r5, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	3501      	adds	r5, #1
 8001098:	e7c9      	b.n	800102e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800109a:	2001      	movs	r0, #1
 800109c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80010a0:	2002      	movs	r0, #2
}
 80010a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080010a6 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80010a6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80010aa:	2b20      	cmp	r3, #32
 80010ac:	d11c      	bne.n	80010e8 <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 80010ae:	b1c9      	cbz	r1, 80010e4 <HAL_UART_Receive_IT+0x3e>
 80010b0:	b1c2      	cbz	r2, 80010e4 <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 80010b2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d016      	beq.n	80010e8 <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 80010ba:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80010bc:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010be:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80010c0:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010c2:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80010c4:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010c8:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80010ca:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010cc:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 80010ce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010d2:	f041 0101 	orr.w	r1, r1, #1
 80010d6:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80010d8:	68d1      	ldr	r1, [r2, #12]
 80010da:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 80010de:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80010e0:	4618      	mov	r0, r3
 80010e2:	4770      	bx	lr
      return HAL_ERROR;
 80010e4:	2001      	movs	r0, #1
 80010e6:	4770      	bx	lr
    return HAL_BUSY; 
 80010e8:	2002      	movs	r0, #2
}
 80010ea:	4770      	bx	lr

080010ec <HAL_UART_TxCpltCallback>:
 80010ec:	4770      	bx	lr

080010ee <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80010ee:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80010f2:	2b22      	cmp	r3, #34	; 0x22
{
 80010f4:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80010f6:	d132      	bne.n	800115e <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010f8:	6883      	ldr	r3, [r0, #8]
 80010fa:	6901      	ldr	r1, [r0, #16]
 80010fc:	6802      	ldr	r2, [r0, #0]
 80010fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001102:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001104:	d11f      	bne.n	8001146 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001106:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001108:	b9c9      	cbnz	r1, 800113e <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800110a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800110e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001112:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001114:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001116:	3c01      	subs	r4, #1
 8001118:	b2a4      	uxth	r4, r4
 800111a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800111c:	b96c      	cbnz	r4, 800113a <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800111e:	6803      	ldr	r3, [r0, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001126:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	f022 0201 	bic.w	r2, r2, #1
 800112e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001130:	2320      	movs	r3, #32
 8001132:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001136:	f000 f8df 	bl	80012f8 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800113a:	2000      	movs	r0, #0
}
 800113c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	f823 2b01 	strh.w	r2, [r3], #1
 8001144:	e7e5      	b.n	8001112 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001146:	b921      	cbnz	r1, 8001152 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001148:	1c59      	adds	r1, r3, #1
 800114a:	6852      	ldr	r2, [r2, #4]
 800114c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e7e0      	b.n	8001114 <UART_Receive_IT+0x26>
 8001152:	6852      	ldr	r2, [r2, #4]
 8001154:	1c59      	adds	r1, r3, #1
 8001156:	6281      	str	r1, [r0, #40]	; 0x28
 8001158:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800115c:	e7f7      	b.n	800114e <UART_Receive_IT+0x60>
    return HAL_BUSY;
 800115e:	2002      	movs	r0, #2
 8001160:	bd10      	pop	{r4, pc}

08001162 <HAL_UART_ErrorCallback>:
 8001162:	4770      	bx	lr

08001164 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001164:	6803      	ldr	r3, [r0, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001168:	68d9      	ldr	r1, [r3, #12]
{
 800116a:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 800116c:	0716      	lsls	r6, r2, #28
{
 800116e:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001170:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001172:	d107      	bne.n	8001184 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001174:	0696      	lsls	r6, r2, #26
 8001176:	d55a      	bpl.n	800122e <HAL_UART_IRQHandler+0xca>
 8001178:	068d      	lsls	r5, r1, #26
 800117a:	d558      	bpl.n	800122e <HAL_UART_IRQHandler+0xca>
}
 800117c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001180:	f7ff bfb5 	b.w	80010ee <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001184:	f015 0501 	ands.w	r5, r5, #1
 8001188:	d102      	bne.n	8001190 <HAL_UART_IRQHandler+0x2c>
 800118a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800118e:	d04e      	beq.n	800122e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001190:	07d3      	lsls	r3, r2, #31
 8001192:	d505      	bpl.n	80011a0 <HAL_UART_IRQHandler+0x3c>
 8001194:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001196:	bf42      	ittt	mi
 8001198:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800119a:	f043 0301 	orrmi.w	r3, r3, #1
 800119e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011a0:	0750      	lsls	r0, r2, #29
 80011a2:	d504      	bpl.n	80011ae <HAL_UART_IRQHandler+0x4a>
 80011a4:	b11d      	cbz	r5, 80011ae <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80011a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011ae:	0793      	lsls	r3, r2, #30
 80011b0:	d504      	bpl.n	80011bc <HAL_UART_IRQHandler+0x58>
 80011b2:	b11d      	cbz	r5, 80011bc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80011b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011bc:	0716      	lsls	r6, r2, #28
 80011be:	d504      	bpl.n	80011ca <HAL_UART_IRQHandler+0x66>
 80011c0:	b11d      	cbz	r5, 80011ca <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80011c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011c4:	f043 0308 	orr.w	r3, r3, #8
 80011c8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80011ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d066      	beq.n	800129e <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011d0:	0695      	lsls	r5, r2, #26
 80011d2:	d504      	bpl.n	80011de <HAL_UART_IRQHandler+0x7a>
 80011d4:	0688      	lsls	r0, r1, #26
 80011d6:	d502      	bpl.n	80011de <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff ff88 	bl	80010ee <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80011e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80011e4:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80011e6:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80011e8:	d402      	bmi.n	80011f0 <HAL_UART_IRQHandler+0x8c>
 80011ea:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80011ee:	d01a      	beq.n	8001226 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80011f0:	f7ff fd7e 	bl	8000cf0 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	695a      	ldr	r2, [r3, #20]
 80011f8:	0652      	lsls	r2, r2, #25
 80011fa:	d510      	bpl.n	800121e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80011fc:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80011fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001204:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001206:	b150      	cbz	r0, 800121e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_UART_IRQHandler+0x13c>)
 800120a:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800120c:	f7ff fa19 	bl	8000642 <HAL_DMA_Abort_IT>
 8001210:	2800      	cmp	r0, #0
 8001212:	d044      	beq.n	800129e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001214:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800121a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800121c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff ff9f 	bl	8001162 <HAL_UART_ErrorCallback>
 8001224:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001226:	f7ff ff9c 	bl	8001162 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800122a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800122c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800122e:	0616      	lsls	r6, r2, #24
 8001230:	d527      	bpl.n	8001282 <HAL_UART_IRQHandler+0x11e>
 8001232:	060d      	lsls	r5, r1, #24
 8001234:	d525      	bpl.n	8001282 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001236:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800123a:	2a21      	cmp	r2, #33	; 0x21
 800123c:	d12f      	bne.n	800129e <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800123e:	68a2      	ldr	r2, [r4, #8]
 8001240:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001244:	6a22      	ldr	r2, [r4, #32]
 8001246:	d117      	bne.n	8001278 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001248:	8811      	ldrh	r1, [r2, #0]
 800124a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800124e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001250:	6921      	ldr	r1, [r4, #16]
 8001252:	b979      	cbnz	r1, 8001274 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001254:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001256:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001258:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800125a:	3a01      	subs	r2, #1
 800125c:	b292      	uxth	r2, r2
 800125e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001260:	b9ea      	cbnz	r2, 800129e <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001268:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001274:	3201      	adds	r2, #1
 8001276:	e7ee      	b.n	8001256 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001278:	1c51      	adds	r1, r2, #1
 800127a:	6221      	str	r1, [r4, #32]
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	e7ea      	b.n	8001258 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001282:	0650      	lsls	r0, r2, #25
 8001284:	d50b      	bpl.n	800129e <HAL_UART_IRQHandler+0x13a>
 8001286:	064a      	lsls	r2, r1, #25
 8001288:	d509      	bpl.n	800129e <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001290:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001292:	2320      	movs	r3, #32
 8001294:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001298:	4620      	mov	r0, r4
 800129a:	f7ff ff27 	bl	80010ec <HAL_UART_TxCpltCallback>
 800129e:	bd70      	pop	{r4, r5, r6, pc}
 80012a0:	080012a5 	.word	0x080012a5

080012a4 <UART_DMAAbortOnError>:
{
 80012a4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80012ac:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80012ae:	f7ff ff58 	bl	8001162 <HAL_UART_ErrorCallback>
 80012b2:	bd08      	pop	{r3, pc}

080012b4 <GetNumtoString>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void GetNumtoString(uint8_t v_counter_u32)
{
 80012b4:	b530      	push	{r4, r5, lr}
	a_buf_u8[3] = 48 + ((v_counter_u32 / 1) - ((v_counter_u32 / 10) * 10));
 80012b6:	250a      	movs	r5, #10
 80012b8:	fbb0 f3f5 	udiv	r3, r0, r5
 80012bc:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <GetNumtoString+0x40>)
 80012c2:	ebc3 0481 	rsb	r4, r3, r1, lsl #2
 80012c6:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80012ca:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 80012ce:	70d1      	strb	r1, [r2, #3]
	a_buf_u8[2] = 48 + ((v_counter_u32 / 10) - ((v_counter_u32 / 100) * 10));
 80012d0:	2164      	movs	r1, #100	; 0x64
 80012d2:	fbb0 f0f1 	udiv	r0, r0, r1
 80012d6:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 80012da:	ebc0 0181 	rsb	r1, r0, r1, lsl #2
 80012de:	3330      	adds	r3, #48	; 0x30
 80012e0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80012e4:	7093      	strb	r3, [r2, #2]
	a_buf_u8[1] = 48 + ((v_counter_u32 / 100) - ((v_counter_u32 / 1000) * 10));
 80012e6:	3030      	adds	r0, #48	; 0x30
	a_buf_u8[0] = 48 + ((v_counter_u32 / 1000) - ((v_counter_u32 / 10000) * 10));
 80012e8:	2330      	movs	r3, #48	; 0x30
	a_buf_u8[1] = 48 + ((v_counter_u32 / 100) - ((v_counter_u32 / 1000) * 10));
 80012ea:	7050      	strb	r0, [r2, #1]
	a_buf_u8[0] = 48 + ((v_counter_u32 / 1000) - ((v_counter_u32 / 10000) * 10));
 80012ec:	7013      	strb	r3, [r2, #0]
	a_buf_u8[4] = 10;
 80012ee:	7115      	strb	r5, [r2, #4]
 80012f0:	bd30      	pop	{r4, r5, pc}
 80012f2:	bf00      	nop
 80012f4:	20000025 	.word	0x20000025

080012f8 <HAL_UART_RxCpltCallback>:

}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012f8:	b510      	push	{r4, lr}
	  GetNumtoString(buf1[0]);
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_UART_RxCpltCallback+0x1c>)
 80012fc:	7818      	ldrb	r0, [r3, #0]
 80012fe:	f7ff ffd9 	bl	80012b4 <GetNumtoString>
	  HAL_UART_Transmit(&huart2,(uint8_t *)a_buf_u8,sizeof(a_buf_u8),10);
 8001302:	230a      	movs	r3, #10
 8001304:	2205      	movs	r2, #5
 8001306:	4904      	ldr	r1, [pc, #16]	; (8001318 <HAL_UART_RxCpltCallback+0x20>)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <HAL_UART_RxCpltCallback+0x24>)

}
 800130a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_UART_Transmit(&huart2,(uint8_t *)a_buf_u8,sizeof(a_buf_u8),10);
 800130e:	f7ff be6d 	b.w	8000fec <HAL_UART_Transmit>
 8001312:	bf00      	nop
 8001314:	20000024 	.word	0x20000024
 8001318:	20000025 	.word	0x20000025
 800131c:	2000002c 	.word	0x2000002c

08001320 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001320:	b530      	push	{r4, r5, lr}
 8001322:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <SystemClock_Config+0xa4>)
 8001326:	2100      	movs	r1, #0
 8001328:	9101      	str	r1, [sp, #4]
 800132a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800132c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <SystemClock_Config+0xa8>)
 800133e:	9102      	str	r1, [sp, #8]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001352:	2301      	movs	r3, #1
 8001354:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800135c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001360:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001362:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001364:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001366:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001368:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800136c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800136e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001370:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001372:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f7ff fa58 	bl	8000828 <HAL_RCC_OscConfig>
 8001378:	b100      	cbz	r0, 800137c <SystemClock_Config+0x5c>
 800137a:	e7fe      	b.n	800137a <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001380:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001386:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001388:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800138e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001392:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001394:	f7ff fbec 	bl	8000b70 <HAL_RCC_ClockConfig>
 8001398:	4605      	mov	r5, r0
 800139a:	b100      	cbz	r0, 800139e <SystemClock_Config+0x7e>
 800139c:	e7fe      	b.n	800139c <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800139e:	f7ff fc81 	bl	8000ca4 <HAL_RCC_GetHCLKFreq>
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80013aa:	f7ff f923 	bl	80005f4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013ae:	4620      	mov	r0, r4
 80013b0:	f7ff f936 	bl	8000620 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80013b4:	462a      	mov	r2, r5
 80013b6:	4629      	mov	r1, r5
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff f8da 	bl	8000574 <HAL_NVIC_SetPriority>
}
 80013c0:	b015      	add	sp, #84	; 0x54
 80013c2:	bd30      	pop	{r4, r5, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000

080013cc <main>:
{
 80013cc:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 80013ce:	f7ff f897 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 80013d2:	f7ff ffa5 	bl	8001320 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	4a16      	ldr	r2, [pc, #88]	; (8001434 <main+0x68>)
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	6b11      	ldr	r1, [r2, #48]	; 0x30
  huart2.Instance = USART2;
 80013de:	4c16      	ldr	r4, [pc, #88]	; (8001438 <main+0x6c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80013e4:	6311      	str	r1, [r2, #48]	; 0x30
 80013e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80013e8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80013ec:	9100      	str	r1, [sp, #0]
 80013ee:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80013f4:	f041 0101 	orr.w	r1, r1, #1
 80013f8:	6311      	str	r1, [r2, #48]	; 0x30
 80013fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
  huart2.Init.BaudRate = 9600;
 80013fc:	490f      	ldr	r1, [pc, #60]	; (800143c <main+0x70>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	60a3      	str	r3, [r4, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	f002 0201 	and.w	r2, r2, #1
 8001404:	9201      	str	r2, [sp, #4]
 8001406:	9a01      	ldr	r2, [sp, #4]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	60e3      	str	r3, [r4, #12]
  huart2.Init.BaudRate = 9600;
 800140a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800140e:	e884 0006 	stmia.w	r4, {r1, r2}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001412:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	220c      	movs	r2, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8001416:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001418:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	61e3      	str	r3, [r4, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	f7ff fdb7 	bl	8000f90 <HAL_UART_Init>
 8001422:	b930      	cbnz	r0, 8001432 <main+0x66>
   HAL_UART_Receive_IT(&huart2,(uint8_t *)buf1,sizeof(buf1));
 8001424:	4d06      	ldr	r5, [pc, #24]	; (8001440 <main+0x74>)
 8001426:	2201      	movs	r2, #1
 8001428:	4629      	mov	r1, r5
 800142a:	4620      	mov	r0, r4
 800142c:	f7ff fe3b 	bl	80010a6 <HAL_UART_Receive_IT>
 8001430:	e7f9      	b.n	8001426 <main+0x5a>
 8001432:	e7fe      	b.n	8001432 <main+0x66>
 8001434:	40023800 	.word	0x40023800
 8001438:	2000002c 	.word	0x2000002c
 800143c:	40004400 	.word	0x40004400
 8001440:	20000024 	.word	0x20000024

08001444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001446:	2003      	movs	r0, #3
 8001448:	f7ff f882 	bl	8000550 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	4611      	mov	r1, r2
 8001450:	f06f 000b 	mvn.w	r0, #11
 8001454:	f7ff f88e 	bl	8000574 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	4611      	mov	r1, r2
 800145c:	f06f 000a 	mvn.w	r0, #10
 8001460:	f7ff f888 	bl	8000574 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	4611      	mov	r1, r2
 8001468:	f06f 0009 	mvn.w	r0, #9
 800146c:	f7ff f882 	bl	8000574 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	4611      	mov	r1, r2
 8001474:	f06f 0004 	mvn.w	r0, #4
 8001478:	f7ff f87c 	bl	8000574 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	4611      	mov	r1, r2
 8001480:	f06f 0003 	mvn.w	r0, #3
 8001484:	f7ff f876 	bl	8000574 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	4611      	mov	r1, r2
 800148c:	f06f 0001 	mvn.w	r0, #1
 8001490:	f7ff f870 	bl	8000574 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	4611      	mov	r1, r2
 8001498:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80014a0:	f7ff b868 	b.w	8000574 <HAL_NVIC_SetPriority>

080014a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80014a6:	6802      	ldr	r2, [r0, #0]
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_UART_MspInit+0x58>)
 80014aa:	429a      	cmp	r2, r3
{
 80014ac:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 80014ae:	d122      	bne.n	80014f6 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b0:	2400      	movs	r4, #0
 80014b2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80014b6:	9400      	str	r4, [sp, #0]
 80014b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	4811      	ldr	r0, [pc, #68]	; (8001500 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80014bc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80014c0:	6419      	str	r1, [r3, #64]	; 0x40
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014cc:	230c      	movs	r3, #12
 80014ce:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014de:	2307      	movs	r3, #7
 80014e0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f7ff f8c1 	bl	8000668 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014e6:	2026      	movs	r0, #38	; 0x26
 80014e8:	4622      	mov	r2, r4
 80014ea:	4621      	mov	r1, r4
 80014ec:	f7ff f842 	bl	8000574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014f0:	2026      	movs	r0, #38	; 0x26
 80014f2:	f7ff f873 	bl	80005dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014f6:	b006      	add	sp, #24
 80014f8:	bd10      	pop	{r4, pc}
 80014fa:	bf00      	nop
 80014fc:	40004400 	.word	0x40004400
 8001500:	40020000 	.word	0x40020000

08001504 <NMI_Handler>:
 8001504:	4770      	bx	lr

08001506 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler>

08001508 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler>

0800150a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800150a:	e7fe      	b.n	800150a <BusFault_Handler>

0800150c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler>

0800150e <SVC_Handler>:
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:
 8001510:	4770      	bx	lr

08001512 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001514:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f7ff f80d 	bl	8000534 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800151e:	f7ff b88c 	b.w	800063a <HAL_SYSTICK_IRQHandler>
	...

08001524 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001524:	4801      	ldr	r0, [pc, #4]	; (800152c <USART2_IRQHandler+0x8>)
 8001526:	f7ff be1d 	b.w	8001164 <HAL_UART_IRQHandler>
 800152a:	bf00      	nop
 800152c:	2000002c 	.word	0x2000002c

08001530 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001530:	490f      	ldr	r1, [pc, #60]	; (8001570 <SystemInit+0x40>)
 8001532:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001536:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <SystemInit+0x44>)
 8001540:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001542:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800154a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001552:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001556:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <SystemInit+0x48>)
 800155a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001562:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001564:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001566:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800156a:	608b      	str	r3, [r1, #8]
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00
 8001574:	40023800 	.word	0x40023800
 8001578:	24003010 	.word	0x24003010

0800157c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001580:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001582:	e003      	b.n	800158c <LoopCopyDataInit>

08001584 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001586:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001588:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800158a:	3104      	adds	r1, #4

0800158c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800158c:	480b      	ldr	r0, [pc, #44]	; (80015bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800158e:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001590:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001592:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001594:	d3f6      	bcc.n	8001584 <CopyDataInit>
  ldr  r2, =_sbss
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001598:	e002      	b.n	80015a0 <LoopFillZerobss>

0800159a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800159a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800159c:	f842 3b04 	str.w	r3, [r2], #4

080015a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015a4:	d3f9      	bcc.n	800159a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015a6:	f7ff ffc3 	bl	8001530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015aa:	f000 f811 	bl	80015d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ae:	f7ff ff0d 	bl	80013cc <main>
  bx  lr    
 80015b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015b8:	08001658 	.word	0x08001658
  ldr  r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015c0:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80015c4:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80015c8:	2000006c 	.word	0x2000006c

080015cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC_IRQHandler>
	...

080015d0 <__libc_init_array>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	4e0d      	ldr	r6, [pc, #52]	; (8001608 <__libc_init_array+0x38>)
 80015d4:	4c0d      	ldr	r4, [pc, #52]	; (800160c <__libc_init_array+0x3c>)
 80015d6:	1ba4      	subs	r4, r4, r6
 80015d8:	10a4      	asrs	r4, r4, #2
 80015da:	2500      	movs	r5, #0
 80015dc:	42a5      	cmp	r5, r4
 80015de:	d109      	bne.n	80015f4 <__libc_init_array+0x24>
 80015e0:	4e0b      	ldr	r6, [pc, #44]	; (8001610 <__libc_init_array+0x40>)
 80015e2:	4c0c      	ldr	r4, [pc, #48]	; (8001614 <__libc_init_array+0x44>)
 80015e4:	f000 f818 	bl	8001618 <_init>
 80015e8:	1ba4      	subs	r4, r4, r6
 80015ea:	10a4      	asrs	r4, r4, #2
 80015ec:	2500      	movs	r5, #0
 80015ee:	42a5      	cmp	r5, r4
 80015f0:	d105      	bne.n	80015fe <__libc_init_array+0x2e>
 80015f2:	bd70      	pop	{r4, r5, r6, pc}
 80015f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015f8:	4798      	blx	r3
 80015fa:	3501      	adds	r5, #1
 80015fc:	e7ee      	b.n	80015dc <__libc_init_array+0xc>
 80015fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001602:	4798      	blx	r3
 8001604:	3501      	adds	r5, #1
 8001606:	e7f2      	b.n	80015ee <__libc_init_array+0x1e>
 8001608:	08001650 	.word	0x08001650
 800160c:	08001650 	.word	0x08001650
 8001610:	08001650 	.word	0x08001650
 8001614:	08001654 	.word	0x08001654

08001618 <_init>:
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	bf00      	nop
 800161c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161e:	bc08      	pop	{r3}
 8001620:	469e      	mov	lr, r3
 8001622:	4770      	bx	lr

08001624 <_fini>:
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001626:	bf00      	nop
 8001628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162a:	bc08      	pop	{r3}
 800162c:	469e      	mov	lr, r3
 800162e:	4770      	bx	lr
